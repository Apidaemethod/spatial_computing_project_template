{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apidae is the name of a large bee family. Bees have a mutualistic relationship with their context, live in communal hives with lots of social interaction but also have individual specific tasks related to their age. Beehives are formed in an instinctively optimized way, by creating the most efficient routes, adapting to wind orientation and other factors. Just like the bees, the building has a mutualistic relationship with its context, as the context is to benefit from the placement of the building and the building is a response to the context. The building is communal with the possibility of lots of social interaction, but also the possibility to seclude from the community. The people in our building help each other with specific tasks related to their age. Young people can help elderly with grocery shopping, and the elderly can help the young people with life advice. Just like the beehive, our building is formed in an optimized way. Other than the beehive, in this case it\u2019s done with the usage of scripts. This is a project repository of Minor Spatial Computing 2020-2021, project group 1. The mid-term and Final submission's process, final products and underlying code/input can be found in this repository. The design challenge We as Project Apidae are requested to design a housing complex incorporating severalcommunal/public facilities for a cooperative live-work-playassociation at location \"Rotterdam, The block betweenVijverhofstraat, Zomerhofstraat, Schoterbosstraat, and Teilingerstraat\". The requested housing complex will be the new home of garduate students, young professionals and elderly who are in need of assisted living. The complex has to provide communal and public facilities to ensure collectivity. Starting point The following program of requirements has been given: Housing: * Student Housing 80 units * Assisted Living 30 units * Starter Housing 100 units * testing spaces Communal spaces: * Underground Parking (minimum of 0.5 parking lots per * apartment) * Vegetation (minimum 30% of the plot) * Workshops/Fab-Labs/Co-working Space and Start-up Offices * Library + Cinematheque + Caf\u00e9/Pub + (pinball) Arcade * Co-cooking/Restaurant * Community Centre * Shop (grocery, tools and crafts) * (electricity producing/odourless /geek-friendly) Gym Also, the following design goals have been given: * Maximum Multi-scale Modularity (Qualitative) * Excellent Ergonomics (Qualitative) * Keeping at least the same amount of housing units as before (Quantitative) * Not blocking direct light for neighbour buildings (Quantitative) * Max solar gain potential (optional, Quantitative) * Max greenery (Quantitative) * Min noise (Quantitative) * Social integration (Qualitative) * Rational spectra of privacy and community (Qualitative) Why Apidae? As architecture students we often do things for a reason, without even knowing whether it will actually work. We would design our building in a certain shape, to maximize the amount of sunlight coming into the building, but without any scientific evidence. Besides that, the architecture world is quite conservative. Change, no matter the improvement, takes a long time to be accepted. At the same time, the construction industry is worldwide responsible for 40% of the C02-emission [Source] . A change in the way we design and form our buildings is necessary. This is where the apidae method comes into play. The apidae method scientifically substantiates design choices, makes the process more efficient and modular, while still giving the designer enough room for subjective choices. Phasing The documentation is divided in 4 phases: * A1_Planning: Preliminary spatial analysis on the site and idea proposal (KPI, Program of Requirements, Diagrams) with the starting point as input. * A2_Configuring: Setting up the plot, determining voxel size * A3_Massing: All the * A4_Forming: Shafts and corridors, Multi criteria, Polygonization Saving this for later\"; <div style= \"line-height:150%;\" > <br> </div>","title":"Home"},{"location":"#the-design-challenge","text":"We as Project Apidae are requested to design a housing complex incorporating severalcommunal/public facilities for a cooperative live-work-playassociation at location \"Rotterdam, The block betweenVijverhofstraat, Zomerhofstraat, Schoterbosstraat, and Teilingerstraat\". The requested housing complex will be the new home of garduate students, young professionals and elderly who are in need of assisted living. The complex has to provide communal and public facilities to ensure collectivity.","title":"The design challenge"},{"location":"#starting-point","text":"The following program of requirements has been given: Housing: * Student Housing 80 units * Assisted Living 30 units * Starter Housing 100 units * testing spaces Communal spaces: * Underground Parking (minimum of 0.5 parking lots per * apartment) * Vegetation (minimum 30% of the plot) * Workshops/Fab-Labs/Co-working Space and Start-up Offices * Library + Cinematheque + Caf\u00e9/Pub + (pinball) Arcade * Co-cooking/Restaurant * Community Centre * Shop (grocery, tools and crafts) * (electricity producing/odourless /geek-friendly) Gym Also, the following design goals have been given: * Maximum Multi-scale Modularity (Qualitative) * Excellent Ergonomics (Qualitative) * Keeping at least the same amount of housing units as before (Quantitative) * Not blocking direct light for neighbour buildings (Quantitative) * Max solar gain potential (optional, Quantitative) * Max greenery (Quantitative) * Min noise (Quantitative) * Social integration (Qualitative) * Rational spectra of privacy and community (Qualitative)","title":"Starting point"},{"location":"#why-apidae","text":"As architecture students we often do things for a reason, without even knowing whether it will actually work. We would design our building in a certain shape, to maximize the amount of sunlight coming into the building, but without any scientific evidence. Besides that, the architecture world is quite conservative. Change, no matter the improvement, takes a long time to be accepted. At the same time, the construction industry is worldwide responsible for 40% of the C02-emission [Source] . A change in the way we design and form our buildings is necessary. This is where the apidae method comes into play. The apidae method scientifically substantiates design choices, makes the process more efficient and modular, while still giving the designer enough room for subjective choices.","title":"Why Apidae?"},{"location":"#phasing","text":"The documentation is divided in 4 phases: * A1_Planning: Preliminary spatial analysis on the site and idea proposal (KPI, Program of Requirements, Diagrams) with the starting point as input. * A2_Configuring: Setting up the plot, determining voxel size * A3_Massing: All the * A4_Forming: Shafts and corridors, Multi criteria, Polygonization Saving this for later\"; <div style= \"line-height:150%;\" > <br> </div>","title":"Phasing"},{"location":"about/","text":"About Spatial Computing in Architectural Design This documentation is part of the final project of the minor Spatial Computing in Architectural Design, course: Computational Design Studio (BK7083). For more information regarding the minor see link below: Course Description Contact us! apidaemethod@gmail.com Project Apidae members Project group 1 consists of the following students: Student Role Maartje Damen Diagrammer Eda Akaltun Journalist Siebren Meines Puzzle solver Tutors Name Faculty Dr. Ir. P. Nourain TU Delft, Design Informatics Ir. H. Hoogeboom TU Delft, Design Informatics Ir. S. Azadi TU Delft, Design Informatics","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#spatial-computing-in-architectural-design","text":"This documentation is part of the final project of the minor Spatial Computing in Architectural Design, course: Computational Design Studio (BK7083). For more information regarding the minor see link below: Course Description","title":"Spatial Computing in Architectural Design"},{"location":"about/#contact-us","text":"apidaemethod@gmail.com","title":"Contact us!"},{"location":"about/#project-apidae-members","text":"Project group 1 consists of the following students: Student Role Maartje Damen Diagrammer Eda Akaltun Journalist Siebren Meines Puzzle solver","title":"Project Apidae members"},{"location":"about/#tutors","text":"Name Faculty Dr. Ir. P. Nourain TU Delft, Design Informatics Ir. H. Hoogeboom TU Delft, Design Informatics Ir. S. Azadi TU Delft, Design Informatics","title":"Tutors"},{"location":"quotes/","text":"The Preacher Quotes by Pirouz Nourian Our purpose is not to make people happy, our purpose is to learn people The easy things in life eventually make life more difficult In computer science we have a problem if we don\u2019t have a problem If you take a ball of dough and turn it into a duck, then leave if for an hour, it will have turned into a ball again. Imagine your neighbour is shooting to the sun with a gun, every time they hit your building it melts like a swiss cheese Who is supposed to shoot whom? Are you shooting at your neighbour or are your neighbours shooting at you? There is something divine about 6 It doesn't particularly have a brain, but it loves oats How on earth can a creature that doesn't even have a brain design something like that?","title":"Quotes"},{"location":"reflection/","text":"Reflection Result Even though our result may not be perfect, it is a good step in the right direction of a better design method. We realize that finishing our project would perhaps have taken a couple years, but we believe that using this method is a great improvement as apposed to the method we were used to. Group process Our different personalities and beliefs made us as a group very critical towards each other. This made us have long and deep arguments over certain choices that had to be made, which made us even more convinced of the decisions made. Our different personalities and roles in the group complemented each other really well. We discussed the things we wanted to do and achieve with the specific scripts and then someone became an \u201cexpert\u201d for that specific script. This gave each of us more time to dig deeper into the code of a certain script and ultimately made us more understanding of the code. Teachers We would like to express our thankfulness to Pirouz Nourian, Shervin Azadi and Hans Hoogenboom as they have guided as through this amazing adventure. They have brought us inspiration and knowledge we will carry with us through the rest of our life. They have showed us that architecture can be progressive, efficient, scientific in an extremely fun and exciting way. Each of them described themselves with their own role in the beginning of the course. We would now shortly like to describe the specific role we experienced with each one of them. Hans Hoogenboom above all made us have a critical second look on the decisions we made. This led us to either changing these decisions, or improving our reasoning for these decisions. For us, Hans is a Reflectionist. Pirouz Nourian thought us the theory behind some of the methods we later implemented, but mostly he inspired us to become activists of a more scientific and efficient method of design. With his knowledge and inspiration, Pirouz is both a preacher and a Journalist. Shervin has extremely helped us to become more understanding of coding. His passion and excitement of teaching the code was quite refreshing, even long after \u2018\u2019office hours\u2019\u2019 and in weekends he would help us with our code. Shervins role is quite obviously the Guru.","title":"Reflection"},{"location":"reflection/#result","text":"Even though our result may not be perfect, it is a good step in the right direction of a better design method. We realize that finishing our project would perhaps have taken a couple years, but we believe that using this method is a great improvement as apposed to the method we were used to.","title":"Result"},{"location":"reflection/#group-process","text":"Our different personalities and beliefs made us as a group very critical towards each other. This made us have long and deep arguments over certain choices that had to be made, which made us even more convinced of the decisions made. Our different personalities and roles in the group complemented each other really well. We discussed the things we wanted to do and achieve with the specific scripts and then someone became an \u201cexpert\u201d for that specific script. This gave each of us more time to dig deeper into the code of a certain script and ultimately made us more understanding of the code.","title":"Group process"},{"location":"reflection/#teachers","text":"We would like to express our thankfulness to Pirouz Nourian, Shervin Azadi and Hans Hoogenboom as they have guided as through this amazing adventure. They have brought us inspiration and knowledge we will carry with us through the rest of our life. They have showed us that architecture can be progressive, efficient, scientific in an extremely fun and exciting way. Each of them described themselves with their own role in the beginning of the course. We would now shortly like to describe the specific role we experienced with each one of them. Hans Hoogenboom above all made us have a critical second look on the decisions we made. This led us to either changing these decisions, or improving our reasoning for these decisions. For us, Hans is a Reflectionist. Pirouz Nourian thought us the theory behind some of the methods we later implemented, but mostly he inspired us to become activists of a more scientific and efficient method of design. With his knowledge and inspiration, Pirouz is both a preacher and a Journalist. Shervin has extremely helped us to become more understanding of coding. His passion and excitement of teaching the code was quite refreshing, even long after \u2018\u2019office hours\u2019\u2019 and in weekends he would help us with our code. Shervins role is quite obviously the Guru.","title":"Teachers"},{"location":"A1_Planning/a1_planning_process/","text":"Process of planning, forming the Program of Requirements Building identity The building exploits the benefits of collectivity as much as possible while limiting its disadvantages. With keeping privacy in mind, the collectivity will provide a better housing situation and a stronger social connection for every inhabitant. The green of the building and surroundings will contribute to a better and resilient neighbourhood. The energy-neutral building in combination with the green and sustainable design will be ready for the future and will form an example and a benchmark for other buildings. User Experience Students The live-work-play co\u00f6perative forms a home basis for the students, where they are not only living with other students, but where they find collective spaces with many extra possibilities. They can make use of the co-cooking kitchen to invite friends and family over and enjoy all the other facilities provided in this building, like the gym and the co-working spaces. The mix with other users gives the student the opportunity to get a discount on their rent by spending time with and helping the elderly and by babysitting the children of the starters. To make this work, a bulletin board is central in the community centre, where people can ask for and give help, products or even leftovers. The community centre forms a place to connect with other users, but also provides a lounge space where they can relax and enjoy a drink, read a book or have friends over. Elderly The elderly in the building will have all the privacy they need, and will not experience any nuisance from the students or starters. By grouping the elderly homes not only nuisance is battled, this is also efficient for elderly support, and to boost the interaction between elderly. This is done by providing coffee spaces near the apartments. Besides the privacy and tranquility in the area of the houses for elderly there are many options to stay active and be in touch with other user groups and externals. The community centre provides many entertainment options for them, and gives them a chance to interact with others. The students can help the elderly with daily tasks and do social activities. This way social isolation is being battled. Starters The starters in this building finished their education and started to work. After a hard day at work the inhabitants enter the building without going through the collective spaces, straight to their homes. If they are in a relationship and/or having kids they will most of the time cook their own dinner. When alone or sometimes do not want to cook they choose to make use of the co-cooking space in the collective area. The dwellings of the starters are big enough to expand the household and have room for teleworking. Therefore the dwellings are well sound isolated and contribute to the privacy of the inhabitants. The starters can do anything in their home with keeping their privacy, but when they need social contact or longing back to their student life they go to the community centre or the bar for seeing a movie or socializing with others. While the starters are busy with their career and family, they could still help in the buildings\u2019 household activities, like helping the elderly, cooking for people or doing activities. The building gives starters the opportunities to work near their home with office workspaces, fab labs and other working rooms. Therefore combining family-life and working will be a nice experience. Still, the majority of the people will work somewhere else. For them, students and elderly can help the starters by providing day care for the children they might have. Externals By adding this building to the neighbourhood, the area gets more lively and all the shops and restaurants will get an economic boost. Thereby, the overall quality of the area can improve and it gets more interesting to go there. A second improvement where externals profit from, is the addition of greenery in the scene. These greenspaces will make the place less rough and gives it even more the reason to go there and enjoy the lively neighbourhood. Key Performance Indicators Collectivity Connect all residents by creating collective (indoor and outdoor) spaces, providing an inclusive living environment. Give the different target groups the option to mix together, but also be able to seclude from each other to have the perks of living together, but not the disadvantages. Home quality Make sure every house has a view and a low proximity to green space Maintain privacy in every residence Ability to enter the building without going through the collective spaces Minimise noise disturbance (nuisance) within the building Diversity in audience Create a diverse offer of residences Spread target groups within the building Sustainability An opportunity for a green focussed design, where collectivity and sustainability can be connected optimize roof and orientation for solar panels Modularity Self-sufficient Energy-neutral (BENG) implement vegetable garden to actively involve residents in sustainability and connect with each other (> close to co-cooking) Improvements on the site Offering students of the nearby hospitality school the possibility to gain experience in the cocooking kitchens and pub. Linking the greenery of the surrounding are with the greenery on site to improve the green image of the neighbourhood. Connecting local amenities towards the public amenities on site so that the local amenities attract more business. Improving the overall ambiance of the neighbourhood Space sizes Estimation internal and external occupation/traffic Internal inhabitants: 30 elders, 80 students + 100 * (2.0) = 200 starters. This equals 310 internal tenants. External traffic: According to Rotterdam statistics the neighborhood Agniesbuurt in Rotterdam has =/- 4100 inhabitants. Estimation community: 70% of the people (18 and older) are members in a club/community. 310 * 0.7 = 217 members. 310*0.12 = +/- 40 members are in hobby clubs 310 * 0.12 = 37.2 = 38 internal people will engage in hobby like activities 310 * 0.15 = 64.5 = 65 internal will engage in voluntary work for elders/neighbors/disabled Space areas 0 Community centre cinema + co-cooking + library + workshop room + 15% 1 Cinematheque 35 m2 for 15 people 70 m2 for 30 people. There are big cinemas nearby, so therefore the community has a small cinematheque. 2 Co-cooking Cooking in pairs (or more?); if full time used: 160 = 80 pairs. Assuming cooking around 16:00-20:00, 1 hour each pair: 80/4 = 20cooking units needed. per co-cooking unit 6m2 * 20 = 120 m2 + storage space 40 m2 + 15% = 190 m2 3 Library 10 seats per 1k users. Community library: 217+4100 members = 43.17 seats. 2500 square feet = 232 m2 4 Workshop room 20 covid proof spaces for workshop, or 50 standing = 200 m2 (20 in 200m2 is possible too, but tighter) 5 Fab labs 8 m2 per fab lab tafel. 310*0.12 = +/- 40 members are in hobby clubs 15 tables * 8 = 120 m2 + 15% = 138 m2 6 entrance hall 100+80+30 = 210 / 6 = 35 35 * 1m2 = 35 m2 + +/- 310 people need to enter. Let's say 4 entrances (every four cardinal direction): 310/4 = 78 people need to enter. +/- 30m2 per entrance 7 parking +/- 22 m2 * amount of cars + entrance etc. 0.5 parking lot per apartment (80+30+100 * 0.5 = 210) = 105 spots 2310 m2 + 90 m2 entrance etc = 2400 m2 underground parking. 8 assisted living (Beschermd wonen \u2018s Heeren Loo: 225-230 m2 per group of 6-7) 30 units = 225*5 (30/6) = 1125 m2 9 starter housing (80m2 per unit) 100*80 = 8000 10 student housing (reference floor plan) +/- 30 m2 * 80 + 15% transport etc = 2400 m2 11 cafe pub restaurant 200 seats 3000+2000 = 465 m2 12 arcade 600 m2 13 shop 12000 sq ft = 1115 m2 14 Co working spaces \u201cThe ideal architectural module of office space is 1.20 meters, but could be between 1.20 and 1.40 meters\u201d 4 1.40 + 20% space between/routing = 6.8 m2 80 students/starters : 20 co working spaces. 20 6.8 m2 = 136 m2 15 Start up office Modular units rentable from 25m2 100 starters, 50 units (external rentable when empty) 1250 m2 16 Gym 310 internal, 20% = 62 tenants. 4100 externals, 20% = 820 tenants. Nearby (walking distance) gym amount: +/- 12 820/4 ours will be 4th big one ; there's actually more but assuming the are smaller in capacity) = +/- 205 62+205 = approx 267 people will use the gym = 10-12 square feet for each member (1.1m2). = 267*12 = 3204 square foot = +/= 300m2 18 coffee hub assisted living 10 m2 per hub, 3 hubs in between every unit group = 30 m2 19 coffee hub starters Every 20 units 10m2 hub = 50m2 20 coffee hub students Every 20 1 hub, 4 * 10m2 = 40 m2","title":"Process"},{"location":"A1_Planning/a1_planning_process/#process-of-planning-forming-the-program-of-requirements","text":"","title":"Process of planning, forming the Program of Requirements"},{"location":"A1_Planning/a1_planning_process/#building-identity","text":"The building exploits the benefits of collectivity as much as possible while limiting its disadvantages. With keeping privacy in mind, the collectivity will provide a better housing situation and a stronger social connection for every inhabitant. The green of the building and surroundings will contribute to a better and resilient neighbourhood. The energy-neutral building in combination with the green and sustainable design will be ready for the future and will form an example and a benchmark for other buildings.","title":"Building identity"},{"location":"A1_Planning/a1_planning_process/#user-experience","text":"","title":"User Experience"},{"location":"A1_Planning/a1_planning_process/#students","text":"The live-work-play co\u00f6perative forms a home basis for the students, where they are not only living with other students, but where they find collective spaces with many extra possibilities. They can make use of the co-cooking kitchen to invite friends and family over and enjoy all the other facilities provided in this building, like the gym and the co-working spaces. The mix with other users gives the student the opportunity to get a discount on their rent by spending time with and helping the elderly and by babysitting the children of the starters. To make this work, a bulletin board is central in the community centre, where people can ask for and give help, products or even leftovers. The community centre forms a place to connect with other users, but also provides a lounge space where they can relax and enjoy a drink, read a book or have friends over.","title":"Students"},{"location":"A1_Planning/a1_planning_process/#elderly","text":"The elderly in the building will have all the privacy they need, and will not experience any nuisance from the students or starters. By grouping the elderly homes not only nuisance is battled, this is also efficient for elderly support, and to boost the interaction between elderly. This is done by providing coffee spaces near the apartments. Besides the privacy and tranquility in the area of the houses for elderly there are many options to stay active and be in touch with other user groups and externals. The community centre provides many entertainment options for them, and gives them a chance to interact with others. The students can help the elderly with daily tasks and do social activities. This way social isolation is being battled.","title":"Elderly"},{"location":"A1_Planning/a1_planning_process/#starters","text":"The starters in this building finished their education and started to work. After a hard day at work the inhabitants enter the building without going through the collective spaces, straight to their homes. If they are in a relationship and/or having kids they will most of the time cook their own dinner. When alone or sometimes do not want to cook they choose to make use of the co-cooking space in the collective area. The dwellings of the starters are big enough to expand the household and have room for teleworking. Therefore the dwellings are well sound isolated and contribute to the privacy of the inhabitants. The starters can do anything in their home with keeping their privacy, but when they need social contact or longing back to their student life they go to the community centre or the bar for seeing a movie or socializing with others. While the starters are busy with their career and family, they could still help in the buildings\u2019 household activities, like helping the elderly, cooking for people or doing activities. The building gives starters the opportunities to work near their home with office workspaces, fab labs and other working rooms. Therefore combining family-life and working will be a nice experience. Still, the majority of the people will work somewhere else. For them, students and elderly can help the starters by providing day care for the children they might have.","title":"Starters"},{"location":"A1_Planning/a1_planning_process/#externals","text":"By adding this building to the neighbourhood, the area gets more lively and all the shops and restaurants will get an economic boost. Thereby, the overall quality of the area can improve and it gets more interesting to go there. A second improvement where externals profit from, is the addition of greenery in the scene. These greenspaces will make the place less rough and gives it even more the reason to go there and enjoy the lively neighbourhood.","title":"Externals"},{"location":"A1_Planning/a1_planning_process/#key-performance-indicators","text":"Collectivity Connect all residents by creating collective (indoor and outdoor) spaces, providing an inclusive living environment. Give the different target groups the option to mix together, but also be able to seclude from each other to have the perks of living together, but not the disadvantages. Home quality Make sure every house has a view and a low proximity to green space Maintain privacy in every residence Ability to enter the building without going through the collective spaces Minimise noise disturbance (nuisance) within the building Diversity in audience Create a diverse offer of residences Spread target groups within the building Sustainability An opportunity for a green focussed design, where collectivity and sustainability can be connected optimize roof and orientation for solar panels Modularity Self-sufficient Energy-neutral (BENG) implement vegetable garden to actively involve residents in sustainability and connect with each other (> close to co-cooking)","title":"Key Performance Indicators"},{"location":"A1_Planning/a1_planning_process/#improvements-on-the-site","text":"Offering students of the nearby hospitality school the possibility to gain experience in the cocooking kitchens and pub. Linking the greenery of the surrounding are with the greenery on site to improve the green image of the neighbourhood. Connecting local amenities towards the public amenities on site so that the local amenities attract more business. Improving the overall ambiance of the neighbourhood","title":"Improvements on the site"},{"location":"A1_Planning/a1_planning_process/#space-sizes","text":"","title":"Space sizes"},{"location":"A1_Planning/a1_planning_process/#estimation-internal-and-external-occupationtraffic","text":"Internal inhabitants: 30 elders, 80 students + 100 * (2.0) = 200 starters. This equals 310 internal tenants. External traffic: According to Rotterdam statistics the neighborhood Agniesbuurt in Rotterdam has =/- 4100 inhabitants. Estimation community: 70% of the people (18 and older) are members in a club/community. 310 * 0.7 = 217 members. 310*0.12 = +/- 40 members are in hobby clubs 310 * 0.12 = 37.2 = 38 internal people will engage in hobby like activities 310 * 0.15 = 64.5 = 65 internal will engage in voluntary work for elders/neighbors/disabled","title":"Estimation internal and external occupation/traffic"},{"location":"A1_Planning/a1_planning_process/#space-areas","text":"0 Community centre cinema + co-cooking + library + workshop room + 15% 1 Cinematheque 35 m2 for 15 people 70 m2 for 30 people. There are big cinemas nearby, so therefore the community has a small cinematheque. 2 Co-cooking Cooking in pairs (or more?); if full time used: 160 = 80 pairs. Assuming cooking around 16:00-20:00, 1 hour each pair: 80/4 = 20cooking units needed. per co-cooking unit 6m2 * 20 = 120 m2 + storage space 40 m2 + 15% = 190 m2 3 Library 10 seats per 1k users. Community library: 217+4100 members = 43.17 seats. 2500 square feet = 232 m2 4 Workshop room 20 covid proof spaces for workshop, or 50 standing = 200 m2 (20 in 200m2 is possible too, but tighter) 5 Fab labs 8 m2 per fab lab tafel. 310*0.12 = +/- 40 members are in hobby clubs 15 tables * 8 = 120 m2 + 15% = 138 m2 6 entrance hall 100+80+30 = 210 / 6 = 35 35 * 1m2 = 35 m2 + +/- 310 people need to enter. Let's say 4 entrances (every four cardinal direction): 310/4 = 78 people need to enter. +/- 30m2 per entrance 7 parking +/- 22 m2 * amount of cars + entrance etc. 0.5 parking lot per apartment (80+30+100 * 0.5 = 210) = 105 spots 2310 m2 + 90 m2 entrance etc = 2400 m2 underground parking. 8 assisted living (Beschermd wonen \u2018s Heeren Loo: 225-230 m2 per group of 6-7) 30 units = 225*5 (30/6) = 1125 m2 9 starter housing (80m2 per unit) 100*80 = 8000 10 student housing (reference floor plan) +/- 30 m2 * 80 + 15% transport etc = 2400 m2 11 cafe pub restaurant 200 seats 3000+2000 = 465 m2 12 arcade 600 m2 13 shop 12000 sq ft = 1115 m2 14 Co working spaces \u201cThe ideal architectural module of office space is 1.20 meters, but could be between 1.20 and 1.40 meters\u201d 4 1.40 + 20% space between/routing = 6.8 m2 80 students/starters : 20 co working spaces. 20 6.8 m2 = 136 m2 15 Start up office Modular units rentable from 25m2 100 starters, 50 units (external rentable when empty) 1250 m2 16 Gym 310 internal, 20% = 62 tenants. 4100 externals, 20% = 820 tenants. Nearby (walking distance) gym amount: +/- 12 820/4 ours will be 4th big one ; there's actually more but assuming the are smaller in capacity) = +/- 205 62+205 = approx 267 people will use the gym = 10-12 square feet for each member (1.1m2). = 267*12 = 3204 square foot = +/= 300m2 18 coffee hub assisted living 10 m2 per hub, 3 hubs in between every unit group = 30 m2 19 coffee hub starters Every 20 units 10m2 hub = 50m2 20 coffee hub students Every 20 1 hub, 4 * 10m2 = 40 m2","title":"Space areas"},{"location":"A1_Planning/a1_planning_product/","text":"Product of planning Metro network diagram & Bubble diagram Through the process, the following metro network diagram and bubble diagram is created in order to visualize the desired and necessary connectivity between spaces.","title":"Product"},{"location":"A1_Planning/a1_planning_product/#product-of-planning","text":"","title":"Product of planning"},{"location":"A1_Planning/a1_planning_product/#metro-network-diagram-bubble-diagram","text":"Through the process, the following metro network diagram and bubble diagram is created in order to visualize the desired and necessary connectivity between spaces.","title":"Metro network diagram &amp; Bubble diagram"},{"location":"A1_Planning/concept_a1_planning/","text":"Planning Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects. Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects.","title":"Planning"},{"location":"A1_Planning/concept_a1_planning/#planning","text":"Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects. Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects.","title":"Planning"},{"location":"A2_Configuring/a2_configuring_process/","text":"Process of configuring Determining voxelsize In order to determine the voxelsize that our growth simulation will work with, a case study has been done. The voxel size has been based on stair sizing because ----------------------. Starting points Stairs Free space residences +/- 270 cm 270 cm= 1 height? 270/6= 45 270/9= 30 270/5= 54 270/3= 90 270/2= 135 Stair dimensions from \u2018\u2019menselijke maat\u2019\u2019 : stair angle between 30 and 41 degrees Stair width for moving in 2 directions, minimum 120 cm rise 14cm advised, minimum of 8cm tread with minimum 25 cm 38 degrees ideal size for stairs? Bouwbesluit minimum tread with 22cm maximum rise 0,188cm source Corridor Main hallways: at least 1,5 metre in width support hallways: at least 1,2 metre in width source Stair sizes Option Rise Tread width Length stairs Width staircase Option 1 Rise= 18cm (3x6) 270/18 = 15 steps 30cm (5x6) 15x30 = 450cm 120cm (20x6) Option 2 18cm (2x9) 270/18 = 15 steps 27cm (3x9) 15x27= 405 126 cm(14x9) Option 3 18cm (3x6): 306/18 = 17 steps 30cm (5x6) 17x30 = 510cm 120cm (20x6) Option 4 18cm (2x9) 306/18 = 17 steps 27cm (3x9) 18x27= 486cm 126 cm(14x9) Option 5 18cm (3x6) 306/18 = 17 steps 24cm (4x6) 17x24 = 408cm 120cm (20x6) For further research we will only use option 3,4 & 5. Since after discussion we decided to enlarge the floor height. First approach Y dimension Option Based on stair option x/y/z sizes Comment Option 1 Option 3 120 / 510 / 306 510 is quite a big size, but there\u2019s no division possible which leads to an integer multitude of 6. So this will not be a good voxel size. Option 2 Option 4 126 / 486 / 306 -> 126 / 162 / 306 To make it fitting for human dimensions let\u2019s divide the the y value by 3. The stairs which we calculated earlier will now be 3 voxels. Option 3 Option 5 120 / 408 / 306 -> 120 / 102 / 306 The previous voxels will be sufficient for a building with the same height everywhere, but the z value is too big to differ in height through the building. Z dimension Option Size Ratio Option 1: based on y dimension option 2 and stairs option 4 divisible by 9 126/162/306 divide the z value with 2-> 126/162/153 the staircase will now be 3x2 voxels ratio 1 to 1.3 Option 2: based on y dimension option 3 and stairs option 5 divisible by 6 120/204/102 divide the z value with 3->The staircase will now be 2x3 voxels ratio 1 to 1.7 Option 3: based on y dimension option 3 and stairs option 5 divisible by 6 120/102/306 divide the z value with 3-> the staircase will now be 4x3 ratio 1 to 0,85 Definitive approach Since a different x and y value affected the modularity of the building and spaces were otherwise forced into one particular direction. We have decided after consultation with our tutors to take the same dimension for the x and y value of the voxel. For the definitive approach towards the voxel size we will use the option for stair dimensions we previously used, since the size was thoroughly thought about in the first approach. Apart from this, as a project group we decided it would be a pragmatic approach to decide our tartan grid based on the thickness of the support structure the building will be made of, to make it fit into the tartan grid. For this, we made a rough estimation of the area of our building through the Program of Requirements, and how this relates to the available area for our building (obtained through measurements in ArcGIS), we came to a rough estimate of 3 stories, if the available area is maximised, in other words: if all the spaces are summed up. Since we have to take into account the varying height in the building, we decided to look at surrounding buildings in the area and the width of the streets and decided upon a maximum of 10 stories high. We estimated that we would need a SHS-HF-300 profile for this height. We chose this profile because it has the same x as y value and based our voxel grid on this. Although these dimensions (300x300) are workable, the size is really small and not really algorithm friendly because the building would consist of too many voxels because of the building site's size. So let\u2019s take the 300x300 voxels as our meso voxels for the tartan grid. If we go back to the stair dimensions which were previously researched and have chosen the following can be said: Rise= 18cm (3x6), 306/18 = 17 steps, tread width= 30cm (5x6), length stairs= 17x30 = 510cm, width staircase= 120cm (20x6) With a stair width of 120cm we could make our voxel size based on 120cm+ meso voxel. But to be on the safe side, and taken into account the railings of the stairs it\u2019s better to take an extra meso voxel for the voxel size. So the voxel size will be 150cm + mesovoxel = 180cm. The tartan grid is the place where the structural profiles or the walls can come. Space criteria In order to meet the desired quality as stated in A1_Planning and given through a Program of Requirements, criteria have been set for spaces. Criteria to spaces The following process has been implemented in order to moderate the input that is necessary in order to work with later on. Table/Matrix of relations The matrix table with connectivity between spaces has been made through the bubble diagram: Program of Requirements with integration of the voxelsize and layers of spaces The following definitive Program of Requirements has been formed through the chosen voxelsize and the given Program of Requirements beforehand. Voxelizing the given lot","title":"Process"},{"location":"A2_Configuring/a2_configuring_process/#process-of-configuring","text":"","title":"Process of configuring"},{"location":"A2_Configuring/a2_configuring_process/#determining-voxelsize","text":"In order to determine the voxelsize that our growth simulation will work with, a case study has been done. The voxel size has been based on stair sizing because ----------------------.","title":"Determining voxelsize"},{"location":"A2_Configuring/a2_configuring_process/#starting-points","text":"Stairs Free space residences +/- 270 cm 270 cm= 1 height? 270/6= 45 270/9= 30 270/5= 54 270/3= 90 270/2= 135 Stair dimensions from \u2018\u2019menselijke maat\u2019\u2019 : stair angle between 30 and 41 degrees Stair width for moving in 2 directions, minimum 120 cm rise 14cm advised, minimum of 8cm tread with minimum 25 cm 38 degrees ideal size for stairs? Bouwbesluit minimum tread with 22cm maximum rise 0,188cm source Corridor Main hallways: at least 1,5 metre in width support hallways: at least 1,2 metre in width source","title":"Starting points"},{"location":"A2_Configuring/a2_configuring_process/#stair-sizes","text":"Option Rise Tread width Length stairs Width staircase Option 1 Rise= 18cm (3x6) 270/18 = 15 steps 30cm (5x6) 15x30 = 450cm 120cm (20x6) Option 2 18cm (2x9) 270/18 = 15 steps 27cm (3x9) 15x27= 405 126 cm(14x9) Option 3 18cm (3x6): 306/18 = 17 steps 30cm (5x6) 17x30 = 510cm 120cm (20x6) Option 4 18cm (2x9) 306/18 = 17 steps 27cm (3x9) 18x27= 486cm 126 cm(14x9) Option 5 18cm (3x6) 306/18 = 17 steps 24cm (4x6) 17x24 = 408cm 120cm (20x6) For further research we will only use option 3,4 & 5. Since after discussion we decided to enlarge the floor height.","title":"Stair sizes"},{"location":"A2_Configuring/a2_configuring_process/#first-approach","text":"","title":"First approach"},{"location":"A2_Configuring/a2_configuring_process/#y-dimension","text":"Option Based on stair option x/y/z sizes Comment Option 1 Option 3 120 / 510 / 306 510 is quite a big size, but there\u2019s no division possible which leads to an integer multitude of 6. So this will not be a good voxel size. Option 2 Option 4 126 / 486 / 306 -> 126 / 162 / 306 To make it fitting for human dimensions let\u2019s divide the the y value by 3. The stairs which we calculated earlier will now be 3 voxels. Option 3 Option 5 120 / 408 / 306 -> 120 / 102 / 306 The previous voxels will be sufficient for a building with the same height everywhere, but the z value is too big to differ in height through the building.","title":"Y dimension"},{"location":"A2_Configuring/a2_configuring_process/#z-dimension","text":"Option Size Ratio Option 1: based on y dimension option 2 and stairs option 4 divisible by 9 126/162/306 divide the z value with 2-> 126/162/153 the staircase will now be 3x2 voxels ratio 1 to 1.3 Option 2: based on y dimension option 3 and stairs option 5 divisible by 6 120/204/102 divide the z value with 3->The staircase will now be 2x3 voxels ratio 1 to 1.7 Option 3: based on y dimension option 3 and stairs option 5 divisible by 6 120/102/306 divide the z value with 3-> the staircase will now be 4x3 ratio 1 to 0,85","title":"Z dimension"},{"location":"A2_Configuring/a2_configuring_process/#definitive-approach","text":"Since a different x and y value affected the modularity of the building and spaces were otherwise forced into one particular direction. We have decided after consultation with our tutors to take the same dimension for the x and y value of the voxel. For the definitive approach towards the voxel size we will use the option for stair dimensions we previously used, since the size was thoroughly thought about in the first approach. Apart from this, as a project group we decided it would be a pragmatic approach to decide our tartan grid based on the thickness of the support structure the building will be made of, to make it fit into the tartan grid. For this, we made a rough estimation of the area of our building through the Program of Requirements, and how this relates to the available area for our building (obtained through measurements in ArcGIS), we came to a rough estimate of 3 stories, if the available area is maximised, in other words: if all the spaces are summed up. Since we have to take into account the varying height in the building, we decided to look at surrounding buildings in the area and the width of the streets and decided upon a maximum of 10 stories high. We estimated that we would need a SHS-HF-300 profile for this height. We chose this profile because it has the same x as y value and based our voxel grid on this. Although these dimensions (300x300) are workable, the size is really small and not really algorithm friendly because the building would consist of too many voxels because of the building site's size. So let\u2019s take the 300x300 voxels as our meso voxels for the tartan grid. If we go back to the stair dimensions which were previously researched and have chosen the following can be said: Rise= 18cm (3x6), 306/18 = 17 steps, tread width= 30cm (5x6), length stairs= 17x30 = 510cm, width staircase= 120cm (20x6) With a stair width of 120cm we could make our voxel size based on 120cm+ meso voxel. But to be on the safe side, and taken into account the railings of the stairs it\u2019s better to take an extra meso voxel for the voxel size. So the voxel size will be 150cm + mesovoxel = 180cm. The tartan grid is the place where the structural profiles or the walls can come.","title":"Definitive approach"},{"location":"A2_Configuring/a2_configuring_process/#space-criteria","text":"In order to meet the desired quality as stated in A1_Planning and given through a Program of Requirements, criteria have been set for spaces.","title":"Space criteria"},{"location":"A2_Configuring/a2_configuring_process/#criteria-to-spaces","text":"The following process has been implemented in order to moderate the input that is necessary in order to work with later on.","title":"Criteria to spaces"},{"location":"A2_Configuring/a2_configuring_process/#tablematrix-of-relations","text":"The matrix table with connectivity between spaces has been made through the bubble diagram:","title":"Table/Matrix of relations"},{"location":"A2_Configuring/a2_configuring_process/#program-of-requirements-with-integration-of-the-voxelsize-and-layers-of-spaces","text":"The following definitive Program of Requirements has been formed through the chosen voxelsize and the given Program of Requirements beforehand.","title":"Program of Requirements with integration of the voxelsize and layers of spaces"},{"location":"A2_Configuring/a2_configuring_process/#voxelizing-the-given-lot","text":"","title":"Voxelizing the given lot"},{"location":"A2_Configuring/a2_configuring_product/","text":"Product of configuring Voxelizing the lattice hier script verwijzing naar 1.8x1.8x1.8 Definitive matrix table","title":"Product"},{"location":"A2_Configuring/a2_configuring_product/#product-of-configuring","text":"","title":"Product of configuring"},{"location":"A2_Configuring/a2_configuring_product/#voxelizing-the-lattice","text":"hier script verwijzing naar 1.8x1.8x1.8","title":"Voxelizing the lattice"},{"location":"A2_Configuring/a2_configuring_product/#definitive-matrix-table","text":"","title":"Definitive matrix table"},{"location":"A2_Configuring/concept_a2_configuring/","text":"Configuring Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour.","title":"Configuring"},{"location":"A2_Configuring/concept_a2_configuring/#configuring","text":"Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour.","title":"Configuring"},{"location":"A3_Massing/a3_massing_process/","text":"A B C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 Process of massing Solar Simulation & Shadow Analysis Based on the ladybug sunpath the solar and shadow envelope are calculated in one file, since they have a largely corresponding step. To do so a cast a ray from the centroid of the voxel towards all the points on the sunpath. If a ray is not intersected by the context, then this voxel receives sunlight from this point. If the ray is intersected by the context, then the voxel does not receive sunlight from this point. For all the voxel that have been hit, the rays that were shot towards the sun are reversed, to calculate the shadow. If this ray intersects the context, then the voxel casts a shadow. If the ray does not intersect the context, then the voxel does not cast a shadow. Both the sunlight and the shadow envelope are then interpolated to a highres value, being of our voxel size. Sun calculation Shadow calculation Lowres size decisions In the first run of the interpolated shadow file, a lowres envelope of 2 voxels high was used. This resulted in the shadow casting calculation becoming much to generalized. In this situation it would see the entire bottom half of the building as not casting shadow on the neighbouring buildings, thus not showing them in the shadow casting and only showing the top half of the building in the visualisation. To solve this problem a lowres envelope of 3 voxels high was used. This resulted in a visualisation of the entire envelope. Skylight & Skylight blocking This script is very similar to the Solar simulation, but instead of loading a sunpath, a sphere is created to represent points in the sky. For each voxel a ray is cast from the centroid of the voxel towards all the points in the sky. If a ray is not intersected by the context, then this voxel receives skylight from this point. If the ray is intersected by the context, then the voxel does not receive skylight from this point. For all the voxel that have been hit, the rays that were shot towards the sky are reversed, to calculate the skylight blocking. If this ray intersects the context, then the voxel casts blocks skylight from the context. If the ray does not intersect the context, then the voxel does not block skylight from the context. Both the skylight and the skylight blocking envelope are then interpolated to a highres value, being of our voxel size. skylight access skylight blocking difference between shadow and solar The result of the shadow envelope, solar envelope, skylight envelope and skylight blocking envelope are processed in 2 ways. Fundamentally our building should be of least disturbance for the surrounding area, so it would not make sense to keep voxels that cast too much shadow or block too much skylight. Therefore, the voxels that cast too much shadow and block too much skylight from the context are removed. For the sun and skylight values a similar argument could be made. For sake of the building one could argue that only the voxels with the best sun and skylight access should be used. However, this would result in removing the voxels on the ground floor. Since building can\u2019t float in the sky(yet), and for the accessibility of public functions its best to have them on the ground floor, the data of sunlight and skylight is stored inside the voxels for the growth model (link to growth model). Removing voxels To not cause too much shadow or block too much skylight from the context, the voxels that cast too much shadow or block too much skylight from the context, are removed from the envelope based on a threshold. This results in a new envelope without the \u201cbad voxels\u201d Threshold New envelope Sun and Skylight improvements Although these scripts are functional, there are still some improvements that could be made. - Factoring the influence of voxels inside the envelope on the sun/skylight and shadow/ skylight blocking. o For the initial stage of storing data and removing voxels, solely using the influence of the context on the voxels to be blocking sun or skylight is sufficient. But for later stages when the building is generated (link to growth model), it would be an improvement to take the influence of light and shadow of voxels on each other. This would make that script even heavier, because it will have to calculate a light and shadow value each time it adds voxels. Besides that, a distinction should made with the outer voxels and inner voxels, to have some depth in the building. This depth should also be specified. To solve this, the growth model could be normally ran at first, and then after it has finished going through an evaluation loop to check the shadow and skylight blocking on the context. - Removing bad voxels based on the shadow the context receives instead of the percentage of the time voxels cause shadow. o As of now a threshold is specified to remove voxels from the envelope based on the percentage of time these voxels cast shadow and block skylight from the context. However, it would be an improvement if the voxels are removed based on the effect they have on the context. If a voxel casts a shadow on the context 50% of the time, this could mean that it causes it on a different building each time, meaning that although the voxel looks \u201cbad\u201d, the net result on the context is negligible. This calculation should also be taken into the growth model (link to growth model). This does mean this script will become even more heavy as it now must calculate the shadow and skylight blocking each time it grows as well. To solve this, the growth model could be normally ran at first, and then after it has finished going through an evaluation loop to check the shadow and skylight blocking on the context. Quietness To calculate the quietness noise in the building in relation to its context a path with noise points on it is loaded inside a script. Each voxel then calculates the distance from the voxel centroid towards the noise point. These distances are added together and converted into a ratio. This script is actually more about business on street level than about quietness, since it imports noise points and not actual decibels from areas. This does not matter too much, since noise could be filtered from a building by adding more insulation and the relative quietness matters more than the actual numbers in decibels Noise highres(quietness) Entrances and distance lattices to these entrances For this script, a design decision is needed in regards to the placement of the entrances. For this, the following site analysis has been made: As is shown, the accessibility from the city centre is highest on the south and westside of the plot. The main connection with the city centre is the route from the south, via the Luchtsingel and the Hofbogen. To expand the atmosphere of this vivid area, the public functions should have short distance to this place. By placing them across the old metroline along the westside of the plot, the street ambiance will get a new boost, the old metroline can be made in good use and an extension of the vivid street scenery from the city centre is then generated. To make this work, a distance lattice is being made. the distance is calculated from all streetlevel voxels that are along this street. This would attract all functions that care about having a public entrance; fablabs, caf\u00e9 pub restaurant, arcade, shop, co-working spaces and startup office. By not giving them a determined entrance, there stays room for these functions to not only grow towards this set location but it gives them a range of places where they can grow with consideration of other values. As the accessibility from the city centre is also high for the eastside of the building, this could function as a more private, yet highly used entrance side. All communal functions could be located here, as well as the main housing entrances and the gym. For these functions, a few different lattices are generated, as the housing access needs a number of set location on different sides of the building, and the community centre entrance is set next to this housing entrance to have a entrance that brings people together. For the parking entrance, the location that has been chosen is close to the housing entrance, yet it should minimize car traffic in the neighbourhood and is therefore determined on the very east side of the building, close to bigger streets. For each lattice, a distance graph is generated for all voxels within the envelope. To minimize these calculations it is done over a bigger voxelsize. After generating this graph, the specific entrance voxels are selected, and with these voxels of interest a distance lattice is generated. After normalizing, interpolation takes place to translate all values to the actual voxelsize that is being used. distance lattice public entrance distance lattice gym distance lattice parking entrance distance lattice housing entrances distance lattice community centre Improvements To make an even more accurate and generative design, the initial locations of the entrances should not be chosen by hand but determined in a calculation of accessibility of the plot. This would be done by making an extensive model of all surrounding streets: their bustle, their usability for different types of traffic and their potential. This extensive model could not only be used for generating entrances, but also for a noise calculation to value all voxels based on the traffic. This more detailed way of locating an entrance should be implemented during the growth model, so closeness of other entrances would be taken into account for generating the wished for street ambiance greenery For the plot, 30% should be dedicated to becoming a greenspace. The location of this greenspace could be generated in three different ways: By hardcoding where the park should be located, for example based on observations made in the surroundings. By checking which ground level voxels would be most suitable for greenery; checking for sun, noise and daylight, and also closeness to certain functions. By checking which ground level voxels are least useful for generating the building, and removing those from the growth model. The first one is a more classic architectural way of designing, and would therefore not fit in our ambitions to create a generative building. The second option would be very interesting. Only this calculation would be useless if the final form of the building would not be taken into account, so doing this the greenery should be part of the agent based model. Not only this, but the agent based model would need an iteration for the sun- and daylight blockage towards the greenery for every growth step, since the most hinder of sun- and daylight would be generated by buildings that are closest to the greenery, being the generative building itself. Next to that, also the voxel values that are above the selected greenery should be taken into account for each iteration. This because by placing a greenery voxel, all voxels above (or all voxels that do not leave a certain value of day-and sunlight available for the voxel) should be removed from the availability lattice. It would be a waste of good voxels if these voxels are very valuable, whilst the greenery voxel would be almost as satisfied with another voxel. There is need for a balance of value in voxels that are discarded because of the greenspace and voxels that are selected for greenspace. Because of the complexity of this system and the lack of worth if not done well, this is not the method that has been executed. For this design, the last method was chosen, finding the average worth of each voxel and removing all voxels that have a low value. This should be done in a two dimensional way, because the greenery will occupy the full height if it takes the ground level voxel. For each voxel, the multiplication of all values that are associated with that location are being taken. Then this value is being summed for all voxels in the z-direction, creating a two dimensional value for each location. After normalizing this value, it is copied to all z-voxels so if a value is lower than the threshold, all voxels in that z-direction are being removed. By then determining the minimum voxel value that is needed to clear 30% of the location, all values that are lower are being removed and all other voxels are being multiplied with the availability lattice that had been generated based on shadow. This results in the final availability lattice, and in the space dedicated for greenery. Evaluation of the location and the shape of the greenery Because of the many entrances that have been generated at the more accessible side of the plot, the distance values of these voxels are relatively impactful for the average value lattice, leaving a low-valued space at the north of the plot. This directly results in a greenspace that is not as open-oriented, but that is more encapsulated behind the building and oriented towards local users. This fits in with our concept of the greenery, that would be a place for retreat and also a place to have a food garden for the neighbourhood and the communal kitchen. Improvements As has been stated in the decision for this type of greenery selection, a much more complex way of determining the location of the greenery would be possible, but a self-evaluation loop for sun- and daylight would be needed, as well as the implementation of current voxel value evaluation with implementation of the greenery voxel values. This would be very useful, but was not manageable within the given timeframe. Shafts and Corridors The shafts and corridors have been generated in a way that each floor has a network of corridors without any dead ends. As is shown in the depth analysis (a translation of the topological map, with the focus on connections to the street) it can be seen that all public functions have their own entrance, all communal functions are connected to the community centre and all housing functions are connected to the housing entrance. For this corridor generation these two connection-groups are the connections that are being used. Other connections are considered secondary, and are therefore not taken into account. The division in functions (housing entrance and communal entrance) corresponds with the initial location of the functions, where all communal functions are located on the first two floors and the housing functions, along with the co-working spaces and the start-up offices, grow above this. This results in two types of corridor networks; one connecting all communal functions and all shafts to upper floors, and one connecting all functions that grow on the upper floors, along with the shafts. For the growth of the communal corridors, the initial seeds of these functions are being placed. Because the location of the shafts is more related to the location of the entrances than it is to the seeds of the voxels, the shafts are located based on these entrance locations. Instead of using the shafts as connections towards each seed, a list of each function seed is used. The shaft locations are then added to this list, and after generating a distance matrix the shortest path between each function in this list is then calculated. These shortest paths are calculated in a two-dimensional plane, and are then copied to all corresponding levels; voxels 1, 2 and 3 for the groundfloor level and voxels 4 and 5 for the second floor. The same steps are being taken for the higher level functions, but in addition the height of the corridors is limited by the length of the shaft that it is connected to. This because the length of the shaft determines whether or not the floor is accessible. Corridor evaluation Because the corridors are all connected, they limit the abm growth by enclosing voxel seeds and therefore we turned them off in this simulation. The location of the shafts led to the corridors growing along the border of the available voxels, occupying valuable space in the building. The shafts itself are also along the border, but this is a design question that does not have a straightforward answer, as shaft locations differ in each building design. For this situation, a placement along the border had been chosen to minimize walking distance within the building. Improvements The concept of these corridors is useful, but should be generated after the growth of the functions. Then it can find paths along the borders of each function, making sure no function gets limited in their growth. For some functions it might not be a problem if they were to be split up by these corridors and this could be determined in the agent preferences (housing functions, offices). This method would also make sure the most valuable voxels would not be occupied by the corridors, because the voxels that would now be occupied are the voxels that are placed later in the growth model and are therefore less ideal. Right now the corridor grows towards the most valuable voxel, occupying both this voxel and (at least) two of its direct neighbours. For the shafts, a stencil should be used to occupy all voxels that would be occupied when placing a shaft. KPI's to agent criteria explain what our criteria for the agents are and how they relate to the KPI's The following criteria have been implemented in the agent based simulation: Matrix based relations between spaces (Collectivity) Sun access (Home quality) + (Sustainability) Entrance distance for public, housing, gym, parking and communal spaces (Diversity in audience) The heights of the spaces (Home quality) The desired area requirements per space (Program of requirements) Skyview (Home quality) Greenery (Sustainability) Noise (Home quality) + (Collectivity) + (Sustainability) Configuring spaces to workable values In order to implement the design criteria as mentioned before, those had to be converted to workable values. The values have been written for each space versus the criteria varying from 0 to 1. 0 indicates no connection, 1 indicates a strong connection (Referencing back to the matrix from A1_Configuring). This has been applied for the following criteria: matrix based relations between spaces, sun access, entrance distance for public, housing, gym, parking and communal spaces, skyview, greenery and noise. For the space heights and space areas a different approach had to be made since those are hardcoded criteria coming from the Program of Requirements. Hence, those explained in the next paragraph. Midterm ABM growth simulation Space heights to stencils In order to implement the height differences of spaces given from the Porgram of Requirements into the Apidae method, the initial given stencil for all agents (see left stencil in the picture below) has been expanded in the z axis. In the code, this has been done for 1, 2, 3, 4 and 5 voxels high. The highest stencil is 5 x 1.8m = 9 meters into the z axis and 1.8m on the x and y axis. The picture below shows, in the order of mention, the neighbors for a stencil that is 1.8m high, 3.6m high and 5.4m high. The creation of the new stencils can be created with the following piece of code: In this piece of code new neighbours have been defined for the stencils that need to be higher than 1.8m. For example, s_2 has it's z axis neighbor now set at 2 high. Beware that later in the growth model, the occupation has to be adjusted accordingly. # creating neighborhood definition for stencil that is 1.8m high s_1 = tg . create_stencil ( \"von_neumann\" , 1 , 1 ) # setting the center to zero s_1 . set_index ([ 0 , 0 , 0 ], 0 ) ##################################################################### # skipping s_2, s_3, s_4 for this example because it's the same way ##################################################################### # creating neighborhood definition for stencil that is 9m high s_5 = tg . create_stencil ( \"von_neumann\" , 1 , 5 ) # setting the center to zero s_5 . set_index ([ 0 , 0 , 0 ], 0 ) s_5 . set_index ([ 0 , 0 , 1 ], 0 ) s_5 . set_index ([ 0 , 0 , 5 ], 1 ) s_5 . set_index ([ 0 , 0 , - 1 ], 0 ) s_5 . set_index ([ 0 , 0 , - 5 ], 1 ) # setting the center to zero s_5 . set_index ([ 0 , 0 , 0 ], 0 ) # listing the stencils in order to make them correspond later with the spaces and their height requirement stencils = [ s_1 , s_2 , s_3 , s_4 , s_5 ] Space areas to voxel amounts Based on the program of requirements, the required space sizes have been coverted to amount of necessary voxels to meet the area requirement and therefore fulfil it. This has been implemented in the script to maintain the desirded area per spaces, and has been used to limit the growth of the agents. From the Program of Requirements the room areas can be obtained, and by giving every space a stencil id according to the desired free height (as explained before how the desired height can be implemented) the total amount of voxel necessary for the space to grow towards can be determined. This can be done with the following piece of code: # max voxel count per space (here we do the stencil type + 1 #times the amount of area needed in order to obtain the total amount of voxels that need to be occupied by the script) # pick room area data a_room_vox = agn_prefs [ \"room_area\" ] # pick stencil id's and do +1 because we start with 0 instead of 1 (id 2 would have stencil 3 high otherwise) a_room_stencil = agn_prefs [ \"stencil_id\" ] + 1 # obtain the max amount of voxels needing to be occupied by doing the room area times the height of the space (stencil) a_room_voxels = a_room_stencil * a_room_vox # print in order to check below if you obtain correct values print ( a_room_voxels ) Which gives the following table that can be used later in the growth model: Definitive program table result (input for generative relations simulation) The following table has been made based on the agent/space criterias, this has been used in the definitive script for generating the agent based design. 4 kinds of values are included next to [white] the agent/space names and space id's: [blue] Desire to closeness to given entrance (0 to 1) [yellow] Desire for high values of the given analysis (0 to 1) [green] Necessary data from the program of requirements (imput specific values) [grey] Desire to be close to given agent/space (0 to 1) The given entrances for blue and given analysis for yellow are loaded in as csv files. For the making of those csv files, address their corresponding script. The Generative Relations Simulation After obtaining all the input necessary for the growth model (distance caltulations, solar simulations etc.) it is imporant to be able to make decisions based on that. For this, the script for the Multiple-criteria decision analysis for agents was used and further developed to our needs. With the method explained before, the stencils and area calculations were made. The final ABM (Agent Based Model) growth script can be found here (INSERT LINKKKKKKKKKKKKKKKKKKK)!!!!!!!!!!!!!!!!!!!!!!!!!!!! How it works The ABM (Agent Based Model) growth script runs over a given timeframe. This timeframe is set for it to grow a voxel/stencil per frame. Due to the implementation of stencils with different z axis, the script becomes more efficient (since it covers more voxels per frame). After intiializing the script over a given timeframe, it evaluates for every agent the voxels and stores the values of the free voxels in a list. This list is later used for the evaluation of the voxels. After having made this list, another for loop is initialized. This is the main agent loop, where all free neighbours are retrieved that are accessible. In the meantime the agents are assessed regarding their maximum given z coordinate value and the max area they're allowed to occupy. After all the free neighbours are known, for every agent, if there is a free neighbour is found; it checks the preferences of the agent and evaluates this with the fuzzy framework. When this is done, there are 2 options for the method of occupation: The max area limit has not been reached yet so it picks the highest value neighbouring voxel. Else, it checks if there are better voxels to be occupied (if the given evaluation limit is higher than the agent satisfaction; it departs that bad voxel and occupies the new one. After this is done for all time frames, the new lattice is constructed with the occupation lattice. This is done with stencils that are assigned per agent (for example the housing will use the stencil with an height of 3.6m, this would also occupy 2 (2x1.8)voxels for the agent per frame instead of 1 with the initial stencil). For this particular case the code has been ran through 2500 frames. Occupying with different stencils For making sure the agents with different kinds of stencils corresponding to their height preferences occupy the necessary amount of voxel in the z axis, a variable has been made and used in the occupation function. # making a variable that gives the height of the stencils in voxel (coincidentally +1 since all stencils grow with 1 voxel per id) a_height = a_stencil_id + 1 #checking if there is enough space for it to see it as available # Function for checking the availability (Since it is repeated several times in the main loop) def check_avail ( avail_lattice , ind , a_stencil_id ): condition = 1 ind_array = np . array ( ind ) for step in range ( a_stencil_id + 1 ): new_ind_array = ind_array + np . array ([ 0 , 0 , step ]) condition *= avail_lattice [ tuple ( new_ind_array )] return condition # if its available: # Function for the occupation (and departure but for this piece of demonstration that part isn't important) def mult_occupation ( selected_neigh_3d_address , a_id , a_height , agn_locs , agn_src_locs , occ_lattice , avail_lattice , departure = False ): # Doing this for x times in the z axis with x coming from a_height for step in range ( a_height ): #giving a step to the regular occupation in order to run this for every step in the z aces new_address = selected_neigh_3d_address + np . array ([ 0 , 0 , step ]) # check if there's enough space in the z axis if new_address [ 2 ] < occ_lattice . shape [ 2 ]: # make tuple of the address selected_neigh_3d_id = tuple ( new_address ) # find the location of the newly selected neighbour selected_neigh_loc = np . array ( selected_neigh_3d_id ) . flatten () if departure == False : # add the newly selected neighbour location to agent locations agn_locs [ a_id ] . append ( selected_neigh_loc ) if step == 0 : agn_src_locs [ a_id ] . append ( selected_neigh_loc ) # set the newly selected neighbour as UNavailable (0) in the availability lattice avail_lattice [ selected_neigh_3d_id ] = 0 # set the newly selected neighbour as OCCUPIED by current agent # (-1 means not-occupied so a_id) occ_lattice [ selected_neigh_3d_id ] = a_id Housing plan modularity with stencils A highly modular building needs to be adaptable and reusable for different functions over time. The standardised voxels are very suitable for generating this, but more importantly, they give freedom to generate many different housing plans. For the agent based model, an extra layer of information could be added by growing stencil-based for all housing, co-working spaces and start-up offices. Different housing tiles are generated, that together carry all needed functions. For each housing type, a tile library should be made to generate rooms and spaces that fulfil all requirements. These tiles each have markings along the sides, where closed walls, windows, openings to public functions or openings to indoor functions are determined. This way, each house will form based on the markings and their personal library. By generating the housing units like this, all houses will automatically be correctly connected to a corridor, the depth of the building will be limited to the depth of a house and each house will have sufficient daylight and have all their functions available. An extra layer to this would then be the implementation of placement of open and closed facades for each house, coherent with the sun orientation of the building, but also the view. For this the demand of sky visibility and sunlight availability could be calculated for each potential window, which would then also limit the occurrence of two houses growing opposite of each other with minimal free space between them. The concept of these stencil-based growth is visualised in the picture above. The timeframe of this course limited the elaboration on this complex growth model, but thoughts have been put into it. Instead, simpler housing plans are generated. Still based on the voxel-sized plan, but with a standardisation for each housing unit, where there are just a few fixed stencils for each building. This is also not implemented in the growth model due to time limitations. Evaluation The current evaluation part of the code measures if an agent is satisfied with the given evaluation value through the program table. If the agent is not satisfied, it allows the agent to grow towards better voxels, where less valuable voxels are swapped for better ones. If the agent is satisfied, it stays the same and stops growing once it reaches it's max area value. The agent satisfaction has been tracked over the final result (2500 frames). With this data Panda tables have been made and visualized through graphs. This way, the agent satisfaction can be tracked without constantly having to look at the visualization and voxel growth manually. See graphs below for the results. The agent names correspond to their agent id in the program. Evaluation over time for public spaces and entrances: Evaluation over time for Assisted living (11), Student housing (17) and Start-up office (19) Evaluation over time for starter housing (16): Final growth Improvement points Distance calculation and evaluation between spaces: We werent able to implement distance calculations between spaces, so spaces do not pull on each other, in fact they are next to each other only because they have the same preferences. Less timeframes (calculations behind) It is better to find a way to do the frames code wise more efficiently since the current one has to be run the amount of voxels the biggest agent is. Which is kind of inefficient since maybe all others are already done halfway. Squareness (conditional neighbour or different stencil) We weren\u2019t able to implement squareness yet due to the time limit. This could have 2 ways: we could set conditions to the neighbours in order to do so or we could make bigger stencils in the x and y axes as cubes but that actually complicates things regarding neighbouring and occupying. Stencil assigning per floor Also we havent yet been able to implement specific stencils only for specific z coordinates, So the public spaces are now 5 z coordinate high stencils instead of one fo 3 that only grows 2 high stencils above itself. Shafts and corridors implementation It is important to combine shafts and corridors, but when we combined those 2, it made the agents get stuck between corridors and not grow further (this happened because we dont want public spaces to grow above a certain height).","title":"Process"},{"location":"A3_Massing/a3_massing_process/#process-of-massing","text":"","title":"Process of massing"},{"location":"A3_Massing/a3_massing_process/#solar-simulation-shadow-analysis","text":"Based on the ladybug sunpath the solar and shadow envelope are calculated in one file, since they have a largely corresponding step. To do so a cast a ray from the centroid of the voxel towards all the points on the sunpath. If a ray is not intersected by the context, then this voxel receives sunlight from this point. If the ray is intersected by the context, then the voxel does not receive sunlight from this point. For all the voxel that have been hit, the rays that were shot towards the sun are reversed, to calculate the shadow. If this ray intersects the context, then the voxel casts a shadow. If the ray does not intersect the context, then the voxel does not cast a shadow. Both the sunlight and the shadow envelope are then interpolated to a highres value, being of our voxel size. Sun calculation Shadow calculation","title":"Solar Simulation &amp; Shadow Analysis"},{"location":"A3_Massing/a3_massing_process/#lowres-size-decisions","text":"In the first run of the interpolated shadow file, a lowres envelope of 2 voxels high was used. This resulted in the shadow casting calculation becoming much to generalized. In this situation it would see the entire bottom half of the building as not casting shadow on the neighbouring buildings, thus not showing them in the shadow casting and only showing the top half of the building in the visualisation. To solve this problem a lowres envelope of 3 voxels high was used. This resulted in a visualisation of the entire envelope.","title":"Lowres size decisions"},{"location":"A3_Massing/a3_massing_process/#skylight-skylight-blocking","text":"This script is very similar to the Solar simulation, but instead of loading a sunpath, a sphere is created to represent points in the sky. For each voxel a ray is cast from the centroid of the voxel towards all the points in the sky. If a ray is not intersected by the context, then this voxel receives skylight from this point. If the ray is intersected by the context, then the voxel does not receive skylight from this point. For all the voxel that have been hit, the rays that were shot towards the sky are reversed, to calculate the skylight blocking. If this ray intersects the context, then the voxel casts blocks skylight from the context. If the ray does not intersect the context, then the voxel does not block skylight from the context. Both the skylight and the skylight blocking envelope are then interpolated to a highres value, being of our voxel size. skylight access skylight blocking","title":"Skylight &amp; Skylight blocking"},{"location":"A3_Massing/a3_massing_process/#difference-between-shadow-and-solar","text":"The result of the shadow envelope, solar envelope, skylight envelope and skylight blocking envelope are processed in 2 ways. Fundamentally our building should be of least disturbance for the surrounding area, so it would not make sense to keep voxels that cast too much shadow or block too much skylight. Therefore, the voxels that cast too much shadow and block too much skylight from the context are removed. For the sun and skylight values a similar argument could be made. For sake of the building one could argue that only the voxels with the best sun and skylight access should be used. However, this would result in removing the voxels on the ground floor. Since building can\u2019t float in the sky(yet), and for the accessibility of public functions its best to have them on the ground floor, the data of sunlight and skylight is stored inside the voxels for the growth model (link to growth model).","title":"difference between shadow and solar"},{"location":"A3_Massing/a3_massing_process/#removing-voxels","text":"To not cause too much shadow or block too much skylight from the context, the voxels that cast too much shadow or block too much skylight from the context, are removed from the envelope based on a threshold. This results in a new envelope without the \u201cbad voxels\u201d Threshold New envelope","title":"Removing voxels"},{"location":"A3_Massing/a3_massing_process/#sun-and-skylight-improvements","text":"Although these scripts are functional, there are still some improvements that could be made. - Factoring the influence of voxels inside the envelope on the sun/skylight and shadow/ skylight blocking. o For the initial stage of storing data and removing voxels, solely using the influence of the context on the voxels to be blocking sun or skylight is sufficient. But for later stages when the building is generated (link to growth model), it would be an improvement to take the influence of light and shadow of voxels on each other. This would make that script even heavier, because it will have to calculate a light and shadow value each time it adds voxels. Besides that, a distinction should made with the outer voxels and inner voxels, to have some depth in the building. This depth should also be specified. To solve this, the growth model could be normally ran at first, and then after it has finished going through an evaluation loop to check the shadow and skylight blocking on the context. - Removing bad voxels based on the shadow the context receives instead of the percentage of the time voxels cause shadow. o As of now a threshold is specified to remove voxels from the envelope based on the percentage of time these voxels cast shadow and block skylight from the context. However, it would be an improvement if the voxels are removed based on the effect they have on the context. If a voxel casts a shadow on the context 50% of the time, this could mean that it causes it on a different building each time, meaning that although the voxel looks \u201cbad\u201d, the net result on the context is negligible. This calculation should also be taken into the growth model (link to growth model). This does mean this script will become even more heavy as it now must calculate the shadow and skylight blocking each time it grows as well. To solve this, the growth model could be normally ran at first, and then after it has finished going through an evaluation loop to check the shadow and skylight blocking on the context.","title":"Sun and Skylight improvements"},{"location":"A3_Massing/a3_massing_process/#quietness","text":"To calculate the quietness noise in the building in relation to its context a path with noise points on it is loaded inside a script. Each voxel then calculates the distance from the voxel centroid towards the noise point. These distances are added together and converted into a ratio. This script is actually more about business on street level than about quietness, since it imports noise points and not actual decibels from areas. This does not matter too much, since noise could be filtered from a building by adding more insulation and the relative quietness matters more than the actual numbers in decibels Noise highres(quietness)","title":"Quietness"},{"location":"A3_Massing/a3_massing_process/#entrances-and-distance-lattices-to-these-entrances","text":"For this script, a design decision is needed in regards to the placement of the entrances. For this, the following site analysis has been made: As is shown, the accessibility from the city centre is highest on the south and westside of the plot. The main connection with the city centre is the route from the south, via the Luchtsingel and the Hofbogen. To expand the atmosphere of this vivid area, the public functions should have short distance to this place. By placing them across the old metroline along the westside of the plot, the street ambiance will get a new boost, the old metroline can be made in good use and an extension of the vivid street scenery from the city centre is then generated. To make this work, a distance lattice is being made. the distance is calculated from all streetlevel voxels that are along this street. This would attract all functions that care about having a public entrance; fablabs, caf\u00e9 pub restaurant, arcade, shop, co-working spaces and startup office. By not giving them a determined entrance, there stays room for these functions to not only grow towards this set location but it gives them a range of places where they can grow with consideration of other values. As the accessibility from the city centre is also high for the eastside of the building, this could function as a more private, yet highly used entrance side. All communal functions could be located here, as well as the main housing entrances and the gym. For these functions, a few different lattices are generated, as the housing access needs a number of set location on different sides of the building, and the community centre entrance is set next to this housing entrance to have a entrance that brings people together. For the parking entrance, the location that has been chosen is close to the housing entrance, yet it should minimize car traffic in the neighbourhood and is therefore determined on the very east side of the building, close to bigger streets. For each lattice, a distance graph is generated for all voxels within the envelope. To minimize these calculations it is done over a bigger voxelsize. After generating this graph, the specific entrance voxels are selected, and with these voxels of interest a distance lattice is generated. After normalizing, interpolation takes place to translate all values to the actual voxelsize that is being used. distance lattice public entrance distance lattice gym distance lattice parking entrance distance lattice housing entrances distance lattice community centre","title":"Entrances and distance lattices to these entrances"},{"location":"A3_Massing/a3_massing_process/#improvements","text":"To make an even more accurate and generative design, the initial locations of the entrances should not be chosen by hand but determined in a calculation of accessibility of the plot. This would be done by making an extensive model of all surrounding streets: their bustle, their usability for different types of traffic and their potential. This extensive model could not only be used for generating entrances, but also for a noise calculation to value all voxels based on the traffic. This more detailed way of locating an entrance should be implemented during the growth model, so closeness of other entrances would be taken into account for generating the wished for street ambiance","title":"Improvements"},{"location":"A3_Massing/a3_massing_process/#greenery","text":"For the plot, 30% should be dedicated to becoming a greenspace. The location of this greenspace could be generated in three different ways: By hardcoding where the park should be located, for example based on observations made in the surroundings. By checking which ground level voxels would be most suitable for greenery; checking for sun, noise and daylight, and also closeness to certain functions. By checking which ground level voxels are least useful for generating the building, and removing those from the growth model. The first one is a more classic architectural way of designing, and would therefore not fit in our ambitions to create a generative building. The second option would be very interesting. Only this calculation would be useless if the final form of the building would not be taken into account, so doing this the greenery should be part of the agent based model. Not only this, but the agent based model would need an iteration for the sun- and daylight blockage towards the greenery for every growth step, since the most hinder of sun- and daylight would be generated by buildings that are closest to the greenery, being the generative building itself. Next to that, also the voxel values that are above the selected greenery should be taken into account for each iteration. This because by placing a greenery voxel, all voxels above (or all voxels that do not leave a certain value of day-and sunlight available for the voxel) should be removed from the availability lattice. It would be a waste of good voxels if these voxels are very valuable, whilst the greenery voxel would be almost as satisfied with another voxel. There is need for a balance of value in voxels that are discarded because of the greenspace and voxels that are selected for greenspace. Because of the complexity of this system and the lack of worth if not done well, this is not the method that has been executed. For this design, the last method was chosen, finding the average worth of each voxel and removing all voxels that have a low value. This should be done in a two dimensional way, because the greenery will occupy the full height if it takes the ground level voxel. For each voxel, the multiplication of all values that are associated with that location are being taken. Then this value is being summed for all voxels in the z-direction, creating a two dimensional value for each location. After normalizing this value, it is copied to all z-voxels so if a value is lower than the threshold, all voxels in that z-direction are being removed. By then determining the minimum voxel value that is needed to clear 30% of the location, all values that are lower are being removed and all other voxels are being multiplied with the availability lattice that had been generated based on shadow. This results in the final availability lattice, and in the space dedicated for greenery.","title":"greenery"},{"location":"A3_Massing/a3_massing_process/#evaluation-of-the-location-and-the-shape-of-the-greenery","text":"Because of the many entrances that have been generated at the more accessible side of the plot, the distance values of these voxels are relatively impactful for the average value lattice, leaving a low-valued space at the north of the plot. This directly results in a greenspace that is not as open-oriented, but that is more encapsulated behind the building and oriented towards local users. This fits in with our concept of the greenery, that would be a place for retreat and also a place to have a food garden for the neighbourhood and the communal kitchen.","title":"Evaluation of the location and the shape of the greenery"},{"location":"A3_Massing/a3_massing_process/#improvements_1","text":"As has been stated in the decision for this type of greenery selection, a much more complex way of determining the location of the greenery would be possible, but a self-evaluation loop for sun- and daylight would be needed, as well as the implementation of current voxel value evaluation with implementation of the greenery voxel values. This would be very useful, but was not manageable within the given timeframe.","title":"Improvements"},{"location":"A3_Massing/a3_massing_process/#shafts-and-corridors","text":"The shafts and corridors have been generated in a way that each floor has a network of corridors without any dead ends. As is shown in the depth analysis (a translation of the topological map, with the focus on connections to the street) it can be seen that all public functions have their own entrance, all communal functions are connected to the community centre and all housing functions are connected to the housing entrance. For this corridor generation these two connection-groups are the connections that are being used. Other connections are considered secondary, and are therefore not taken into account. The division in functions (housing entrance and communal entrance) corresponds with the initial location of the functions, where all communal functions are located on the first two floors and the housing functions, along with the co-working spaces and the start-up offices, grow above this. This results in two types of corridor networks; one connecting all communal functions and all shafts to upper floors, and one connecting all functions that grow on the upper floors, along with the shafts. For the growth of the communal corridors, the initial seeds of these functions are being placed. Because the location of the shafts is more related to the location of the entrances than it is to the seeds of the voxels, the shafts are located based on these entrance locations. Instead of using the shafts as connections towards each seed, a list of each function seed is used. The shaft locations are then added to this list, and after generating a distance matrix the shortest path between each function in this list is then calculated. These shortest paths are calculated in a two-dimensional plane, and are then copied to all corresponding levels; voxels 1, 2 and 3 for the groundfloor level and voxels 4 and 5 for the second floor. The same steps are being taken for the higher level functions, but in addition the height of the corridors is limited by the length of the shaft that it is connected to. This because the length of the shaft determines whether or not the floor is accessible.","title":"Shafts and Corridors"},{"location":"A3_Massing/a3_massing_process/#corridor-evaluation","text":"Because the corridors are all connected, they limit the abm growth by enclosing voxel seeds and therefore we turned them off in this simulation. The location of the shafts led to the corridors growing along the border of the available voxels, occupying valuable space in the building. The shafts itself are also along the border, but this is a design question that does not have a straightforward answer, as shaft locations differ in each building design. For this situation, a placement along the border had been chosen to minimize walking distance within the building.","title":"Corridor evaluation"},{"location":"A3_Massing/a3_massing_process/#improvements_2","text":"The concept of these corridors is useful, but should be generated after the growth of the functions. Then it can find paths along the borders of each function, making sure no function gets limited in their growth. For some functions it might not be a problem if they were to be split up by these corridors and this could be determined in the agent preferences (housing functions, offices). This method would also make sure the most valuable voxels would not be occupied by the corridors, because the voxels that would now be occupied are the voxels that are placed later in the growth model and are therefore less ideal. Right now the corridor grows towards the most valuable voxel, occupying both this voxel and (at least) two of its direct neighbours. For the shafts, a stencil should be used to occupy all voxels that would be occupied when placing a shaft.","title":"Improvements"},{"location":"A3_Massing/a3_massing_process/#kpis-to-agent-criteria","text":"explain what our criteria for the agents are and how they relate to the KPI's The following criteria have been implemented in the agent based simulation: Matrix based relations between spaces (Collectivity) Sun access (Home quality) + (Sustainability) Entrance distance for public, housing, gym, parking and communal spaces (Diversity in audience) The heights of the spaces (Home quality) The desired area requirements per space (Program of requirements) Skyview (Home quality) Greenery (Sustainability) Noise (Home quality) + (Collectivity) + (Sustainability)","title":"KPI's to agent criteria"},{"location":"A3_Massing/a3_massing_process/#configuring-spaces-to-workable-values","text":"In order to implement the design criteria as mentioned before, those had to be converted to workable values. The values have been written for each space versus the criteria varying from 0 to 1. 0 indicates no connection, 1 indicates a strong connection (Referencing back to the matrix from A1_Configuring). This has been applied for the following criteria: matrix based relations between spaces, sun access, entrance distance for public, housing, gym, parking and communal spaces, skyview, greenery and noise. For the space heights and space areas a different approach had to be made since those are hardcoded criteria coming from the Program of Requirements. Hence, those explained in the next paragraph. Midterm ABM growth simulation","title":"Configuring spaces to workable values"},{"location":"A3_Massing/a3_massing_process/#space-heights-to-stencils","text":"In order to implement the height differences of spaces given from the Porgram of Requirements into the Apidae method, the initial given stencil for all agents (see left stencil in the picture below) has been expanded in the z axis. In the code, this has been done for 1, 2, 3, 4 and 5 voxels high. The highest stencil is 5 x 1.8m = 9 meters into the z axis and 1.8m on the x and y axis. The picture below shows, in the order of mention, the neighbors for a stencil that is 1.8m high, 3.6m high and 5.4m high. The creation of the new stencils can be created with the following piece of code: In this piece of code new neighbours have been defined for the stencils that need to be higher than 1.8m. For example, s_2 has it's z axis neighbor now set at 2 high. Beware that later in the growth model, the occupation has to be adjusted accordingly. # creating neighborhood definition for stencil that is 1.8m high s_1 = tg . create_stencil ( \"von_neumann\" , 1 , 1 ) # setting the center to zero s_1 . set_index ([ 0 , 0 , 0 ], 0 ) ##################################################################### # skipping s_2, s_3, s_4 for this example because it's the same way ##################################################################### # creating neighborhood definition for stencil that is 9m high s_5 = tg . create_stencil ( \"von_neumann\" , 1 , 5 ) # setting the center to zero s_5 . set_index ([ 0 , 0 , 0 ], 0 ) s_5 . set_index ([ 0 , 0 , 1 ], 0 ) s_5 . set_index ([ 0 , 0 , 5 ], 1 ) s_5 . set_index ([ 0 , 0 , - 1 ], 0 ) s_5 . set_index ([ 0 , 0 , - 5 ], 1 ) # setting the center to zero s_5 . set_index ([ 0 , 0 , 0 ], 0 ) # listing the stencils in order to make them correspond later with the spaces and their height requirement stencils = [ s_1 , s_2 , s_3 , s_4 , s_5 ]","title":"Space heights to stencils"},{"location":"A3_Massing/a3_massing_process/#space-areas-to-voxel-amounts","text":"Based on the program of requirements, the required space sizes have been coverted to amount of necessary voxels to meet the area requirement and therefore fulfil it. This has been implemented in the script to maintain the desirded area per spaces, and has been used to limit the growth of the agents. From the Program of Requirements the room areas can be obtained, and by giving every space a stencil id according to the desired free height (as explained before how the desired height can be implemented) the total amount of voxel necessary for the space to grow towards can be determined. This can be done with the following piece of code: # max voxel count per space (here we do the stencil type + 1 #times the amount of area needed in order to obtain the total amount of voxels that need to be occupied by the script) # pick room area data a_room_vox = agn_prefs [ \"room_area\" ] # pick stencil id's and do +1 because we start with 0 instead of 1 (id 2 would have stencil 3 high otherwise) a_room_stencil = agn_prefs [ \"stencil_id\" ] + 1 # obtain the max amount of voxels needing to be occupied by doing the room area times the height of the space (stencil) a_room_voxels = a_room_stencil * a_room_vox # print in order to check below if you obtain correct values print ( a_room_voxels ) Which gives the following table that can be used later in the growth model:","title":"Space areas to voxel amounts"},{"location":"A3_Massing/a3_massing_process/#definitive-program-table-result-input-for-generative-relations-simulation","text":"The following table has been made based on the agent/space criterias, this has been used in the definitive script for generating the agent based design. 4 kinds of values are included next to [white] the agent/space names and space id's: [blue] Desire to closeness to given entrance (0 to 1) [yellow] Desire for high values of the given analysis (0 to 1) [green] Necessary data from the program of requirements (imput specific values) [grey] Desire to be close to given agent/space (0 to 1) The given entrances for blue and given analysis for yellow are loaded in as csv files. For the making of those csv files, address their corresponding script.","title":"Definitive program table result (input for generative relations simulation)"},{"location":"A3_Massing/a3_massing_process/#the-generative-relations-simulation","text":"After obtaining all the input necessary for the growth model (distance caltulations, solar simulations etc.) it is imporant to be able to make decisions based on that. For this, the script for the Multiple-criteria decision analysis for agents was used and further developed to our needs. With the method explained before, the stencils and area calculations were made. The final ABM (Agent Based Model) growth script can be found here (INSERT LINKKKKKKKKKKKKKKKKKKK)!!!!!!!!!!!!!!!!!!!!!!!!!!!!","title":"The Generative Relations Simulation"},{"location":"A3_Massing/a3_massing_process/#how-it-works","text":"The ABM (Agent Based Model) growth script runs over a given timeframe. This timeframe is set for it to grow a voxel/stencil per frame. Due to the implementation of stencils with different z axis, the script becomes more efficient (since it covers more voxels per frame). After intiializing the script over a given timeframe, it evaluates for every agent the voxels and stores the values of the free voxels in a list. This list is later used for the evaluation of the voxels. After having made this list, another for loop is initialized. This is the main agent loop, where all free neighbours are retrieved that are accessible. In the meantime the agents are assessed regarding their maximum given z coordinate value and the max area they're allowed to occupy. After all the free neighbours are known, for every agent, if there is a free neighbour is found; it checks the preferences of the agent and evaluates this with the fuzzy framework. When this is done, there are 2 options for the method of occupation: The max area limit has not been reached yet so it picks the highest value neighbouring voxel. Else, it checks if there are better voxels to be occupied (if the given evaluation limit is higher than the agent satisfaction; it departs that bad voxel and occupies the new one. After this is done for all time frames, the new lattice is constructed with the occupation lattice. This is done with stencils that are assigned per agent (for example the housing will use the stencil with an height of 3.6m, this would also occupy 2 (2x1.8)voxels for the agent per frame instead of 1 with the initial stencil). For this particular case the code has been ran through 2500 frames.","title":"How it works"},{"location":"A3_Massing/a3_massing_process/#occupying-with-different-stencils","text":"For making sure the agents with different kinds of stencils corresponding to their height preferences occupy the necessary amount of voxel in the z axis, a variable has been made and used in the occupation function. # making a variable that gives the height of the stencils in voxel (coincidentally +1 since all stencils grow with 1 voxel per id) a_height = a_stencil_id + 1 #checking if there is enough space for it to see it as available # Function for checking the availability (Since it is repeated several times in the main loop) def check_avail ( avail_lattice , ind , a_stencil_id ): condition = 1 ind_array = np . array ( ind ) for step in range ( a_stencil_id + 1 ): new_ind_array = ind_array + np . array ([ 0 , 0 , step ]) condition *= avail_lattice [ tuple ( new_ind_array )] return condition # if its available: # Function for the occupation (and departure but for this piece of demonstration that part isn't important) def mult_occupation ( selected_neigh_3d_address , a_id , a_height , agn_locs , agn_src_locs , occ_lattice , avail_lattice , departure = False ): # Doing this for x times in the z axis with x coming from a_height for step in range ( a_height ): #giving a step to the regular occupation in order to run this for every step in the z aces new_address = selected_neigh_3d_address + np . array ([ 0 , 0 , step ]) # check if there's enough space in the z axis if new_address [ 2 ] < occ_lattice . shape [ 2 ]: # make tuple of the address selected_neigh_3d_id = tuple ( new_address ) # find the location of the newly selected neighbour selected_neigh_loc = np . array ( selected_neigh_3d_id ) . flatten () if departure == False : # add the newly selected neighbour location to agent locations agn_locs [ a_id ] . append ( selected_neigh_loc ) if step == 0 : agn_src_locs [ a_id ] . append ( selected_neigh_loc ) # set the newly selected neighbour as UNavailable (0) in the availability lattice avail_lattice [ selected_neigh_3d_id ] = 0 # set the newly selected neighbour as OCCUPIED by current agent # (-1 means not-occupied so a_id) occ_lattice [ selected_neigh_3d_id ] = a_id","title":"Occupying with different stencils"},{"location":"A3_Massing/a3_massing_process/#housing-plan-modularity-with-stencils","text":"A highly modular building needs to be adaptable and reusable for different functions over time. The standardised voxels are very suitable for generating this, but more importantly, they give freedom to generate many different housing plans. For the agent based model, an extra layer of information could be added by growing stencil-based for all housing, co-working spaces and start-up offices. Different housing tiles are generated, that together carry all needed functions. For each housing type, a tile library should be made to generate rooms and spaces that fulfil all requirements. These tiles each have markings along the sides, where closed walls, windows, openings to public functions or openings to indoor functions are determined. This way, each house will form based on the markings and their personal library. By generating the housing units like this, all houses will automatically be correctly connected to a corridor, the depth of the building will be limited to the depth of a house and each house will have sufficient daylight and have all their functions available. An extra layer to this would then be the implementation of placement of open and closed facades for each house, coherent with the sun orientation of the building, but also the view. For this the demand of sky visibility and sunlight availability could be calculated for each potential window, which would then also limit the occurrence of two houses growing opposite of each other with minimal free space between them. The concept of these stencil-based growth is visualised in the picture above. The timeframe of this course limited the elaboration on this complex growth model, but thoughts have been put into it. Instead, simpler housing plans are generated. Still based on the voxel-sized plan, but with a standardisation for each housing unit, where there are just a few fixed stencils for each building. This is also not implemented in the growth model due to time limitations.","title":"Housing plan modularity with stencils"},{"location":"A3_Massing/a3_massing_process/#evaluation","text":"The current evaluation part of the code measures if an agent is satisfied with the given evaluation value through the program table. If the agent is not satisfied, it allows the agent to grow towards better voxels, where less valuable voxels are swapped for better ones. If the agent is satisfied, it stays the same and stops growing once it reaches it's max area value. The agent satisfaction has been tracked over the final result (2500 frames). With this data Panda tables have been made and visualized through graphs. This way, the agent satisfaction can be tracked without constantly having to look at the visualization and voxel growth manually. See graphs below for the results. The agent names correspond to their agent id in the program. Evaluation over time for public spaces and entrances: Evaluation over time for Assisted living (11), Student housing (17) and Start-up office (19) Evaluation over time for starter housing (16):","title":"Evaluation"},{"location":"A3_Massing/a3_massing_process/#final-growth","text":"","title":"Final growth"},{"location":"A3_Massing/a3_massing_process/#improvement-points","text":"Distance calculation and evaluation between spaces: We werent able to implement distance calculations between spaces, so spaces do not pull on each other, in fact they are next to each other only because they have the same preferences. Less timeframes (calculations behind) It is better to find a way to do the frames code wise more efficiently since the current one has to be run the amount of voxels the biggest agent is. Which is kind of inefficient since maybe all others are already done halfway. Squareness (conditional neighbour or different stencil) We weren\u2019t able to implement squareness yet due to the time limit. This could have 2 ways: we could set conditions to the neighbours in order to do so or we could make bigger stencils in the x and y axes as cubes but that actually complicates things regarding neighbouring and occupying. Stencil assigning per floor Also we havent yet been able to implement specific stencils only for specific z coordinates, So the public spaces are now 5 z coordinate high stencils instead of one fo 3 that only grows 2 high stencils above itself. Shafts and corridors implementation It is important to combine shafts and corridors, but when we combined those 2, it made the agents get stuck between corridors and not grow further (this happened because we dont want public spaces to grow above a certain height).","title":"Improvement points"},{"location":"A3_Massing/a3_massing_product/","text":"Product of massing","title":"Product"},{"location":"A3_Massing/a3_massing_product/#product-of-massing","text":"","title":"Product of massing"},{"location":"A3_Massing/concept_a3_massing/","text":"Massing Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities.","title":"Massing"},{"location":"A3_Massing/concept_a3_massing/#massing","text":"Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities.","title":"Massing"},{"location":"A4_Forming/a4_forming_process/","text":"Evaluating voxels Polygonization Perfect shape grasshopper script Everything thus far in this process has been modular and efficient. When it came to polygonization, which consists of a lot of manual labour, it did not feel like it was conformed to the ideology of this course. That\u2019s why we decided to make this process more modular and efficient. This originated the beginning of the \u2018\u2019perfect shape\u2019\u2019 grasshopper script. The script takes a perfect shape (cube) and cuts it into 152 pieces. It then sorts these pieces based on a distance from a point to the centroid of a piece. With the usage of slider, a selection can be made for a specific piece and a specific name. After this a directory is selected to save all the files to, by pressing a button. There is also the option to bake every object to their correct layer by pressing a button, as a backup check, as well as the option and delete all objects. For altering the building, the desired geometry should be added onto the \u201cperfect shape\u201d, creating a \u201cnew geometry\u201d. This shaped will then also be cut into 152 pieces, and sort based on a distance from the same point to the centroid of the pieces. The \u201cperfect shape\u201d pieces will form a cutting box by which the \u201cnew geometry\u201d pieces are cut up. In theory the \u201cnew geometry\u201d pieces should be in the same position as the \u201cperfect shape\u201d bounding box for a specific number. For this \u201cnew geometry\u201d the only change that must be made to the rest of the script, is to select a new directory to save the pieces to. This makes the process of generating multiple tilesets extremely efficient. This is the theory behind the script. Unfortunately, in practice, there are some challenges to work around. Firstly the \u201cnew geometry\u201d should be somewhat cube like. This means that although the added geometry can be asymmetrical, adding/extruding the geometry on an edge can only be done in a symmetrical way, otherwise the box will be cut up into more than 152 pieces. The way the 152 pieces are sorted is done by a distance from the piece towards a point. By altering the geometry, these distances do not always stay completely the same though. In 5 \u201cnew geometries\u201d tests, in 2 to 5 pieces out of 152 pieces, the order had changed. This can be solved by manually changing the slider to the correct position. In the 5 test runs the change of the slider was a maximum of 5 up or down. Pseudocode Perfect shape grasshopper script symmetry = 152 pieces assymetry = more pieces Polygonization script Out of the possible 24 subtiles, it is only necessary to use 10 of them, the rest could be used for exceptions or when shapes are more complicated. In the 10 subtiles, there are 2 subtiles missing. There is no distinction between floor and roof and no distinction between roof corner and floor corner. As of now if when adding a railing to the roof of the building, this railing will also appear on the bottom of the building. different facade types polygonization model In the polygonization script itself, there are also still some challenges. Loading in textures and giving it to objects without making a mesh out of it works fine. But when the object file is made a mesh, it loses its texture coordinates. Our group managed to extract texture coordinates from an OBJ and give them to the object that is made a mesh in the jupyter notebook, but the link between textures + texture coordinates and the generated tiles from the subset is missing when exporting the final results or running everything through the poligonization script. Perhaps in the future another group can solve and implement this. To give the building a varying appearance, instead of having the same look everywhere throughout the building, stencils were implemented. Due to our floors being 2 voxels high, this brought a challenge. To vary a floor from down to top, it was necessary to design a tileset for the top as well as the bottom of the floor. While selecting these singular voxels as a stencil, another problem appeared. When separating 1 voxel from a bigger number of voxels, it will change from being a wall, to being a corner. The design of the singular voxel will have to be placed on the corner now. Since there is no distinction in the subtiles between a top or a bottom corner, this singular voxel will be symmetrical in both directions. This process is yet to be perfect, but the solutions seems to be not to far away. If the linkage between the textures+ texture coordinates and the generated tiles, the 2 extra subtiles are added, the usage of stencils is improved, this should be a good way to design the exterior of the building in a quick and modular way. 1 2 3 4 5 The simulation","title":"Process"},{"location":"A4_Forming/a4_forming_process/#evaluating-voxels","text":"","title":"Evaluating voxels"},{"location":"A4_Forming/a4_forming_process/#polygonization","text":"","title":"Polygonization"},{"location":"A4_Forming/a4_forming_process/#perfect-shape-grasshopper-script","text":"Everything thus far in this process has been modular and efficient. When it came to polygonization, which consists of a lot of manual labour, it did not feel like it was conformed to the ideology of this course. That\u2019s why we decided to make this process more modular and efficient. This originated the beginning of the \u2018\u2019perfect shape\u2019\u2019 grasshopper script. The script takes a perfect shape (cube) and cuts it into 152 pieces. It then sorts these pieces based on a distance from a point to the centroid of a piece. With the usage of slider, a selection can be made for a specific piece and a specific name. After this a directory is selected to save all the files to, by pressing a button. There is also the option to bake every object to their correct layer by pressing a button, as a backup check, as well as the option and delete all objects. For altering the building, the desired geometry should be added onto the \u201cperfect shape\u201d, creating a \u201cnew geometry\u201d. This shaped will then also be cut into 152 pieces, and sort based on a distance from the same point to the centroid of the pieces. The \u201cperfect shape\u201d pieces will form a cutting box by which the \u201cnew geometry\u201d pieces are cut up. In theory the \u201cnew geometry\u201d pieces should be in the same position as the \u201cperfect shape\u201d bounding box for a specific number. For this \u201cnew geometry\u201d the only change that must be made to the rest of the script, is to select a new directory to save the pieces to. This makes the process of generating multiple tilesets extremely efficient. This is the theory behind the script. Unfortunately, in practice, there are some challenges to work around. Firstly the \u201cnew geometry\u201d should be somewhat cube like. This means that although the added geometry can be asymmetrical, adding/extruding the geometry on an edge can only be done in a symmetrical way, otherwise the box will be cut up into more than 152 pieces. The way the 152 pieces are sorted is done by a distance from the piece towards a point. By altering the geometry, these distances do not always stay completely the same though. In 5 \u201cnew geometries\u201d tests, in 2 to 5 pieces out of 152 pieces, the order had changed. This can be solved by manually changing the slider to the correct position. In the 5 test runs the change of the slider was a maximum of 5 up or down.","title":"Perfect shape grasshopper script"},{"location":"A4_Forming/a4_forming_process/#pseudocode-perfect-shape-grasshopper-script","text":"","title":"Pseudocode Perfect shape grasshopper script"},{"location":"A4_Forming/a4_forming_process/#symmetry-152-pieces","text":"","title":"symmetry = 152 pieces"},{"location":"A4_Forming/a4_forming_process/#assymetry-more-pieces","text":"","title":"assymetry = more pieces"},{"location":"A4_Forming/a4_forming_process/#polygonization-script","text":"Out of the possible 24 subtiles, it is only necessary to use 10 of them, the rest could be used for exceptions or when shapes are more complicated. In the 10 subtiles, there are 2 subtiles missing. There is no distinction between floor and roof and no distinction between roof corner and floor corner. As of now if when adding a railing to the roof of the building, this railing will also appear on the bottom of the building. different facade types polygonization model In the polygonization script itself, there are also still some challenges. Loading in textures and giving it to objects without making a mesh out of it works fine. But when the object file is made a mesh, it loses its texture coordinates. Our group managed to extract texture coordinates from an OBJ and give them to the object that is made a mesh in the jupyter notebook, but the link between textures + texture coordinates and the generated tiles from the subset is missing when exporting the final results or running everything through the poligonization script. Perhaps in the future another group can solve and implement this. To give the building a varying appearance, instead of having the same look everywhere throughout the building, stencils were implemented. Due to our floors being 2 voxels high, this brought a challenge. To vary a floor from down to top, it was necessary to design a tileset for the top as well as the bottom of the floor. While selecting these singular voxels as a stencil, another problem appeared. When separating 1 voxel from a bigger number of voxels, it will change from being a wall, to being a corner. The design of the singular voxel will have to be placed on the corner now. Since there is no distinction in the subtiles between a top or a bottom corner, this singular voxel will be symmetrical in both directions. This process is yet to be perfect, but the solutions seems to be not to far away. If the linkage between the textures+ texture coordinates and the generated tiles, the 2 extra subtiles are added, the usage of stencils is improved, this should be a good way to design the exterior of the building in a quick and modular way. 1 2 3 4 5","title":"Polygonization script"},{"location":"A4_Forming/a4_forming_process/#the-simulation","text":"","title":"The simulation"},{"location":"A4_Forming/a4_forming_product/","text":"","title":"Product"},{"location":"A4_Forming/concept_a4_forming/","text":"Forming Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation.","title":"Forming"},{"location":"A4_Forming/concept_a4_forming/#forming","text":"Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation.","title":"Forming"},{"location":"Final_Deliverables/readme/","text":"","title":"Final_Deliverables"},{"location":"documenting/folder_structure/","text":"Folder Structure The folders in student projects should strictly follow the structure of the folders in this repository. The main folders are four assignment folder (corresponding to each assignment) and one folder for final deliverables of your project. In general, the process sub-folders include all the necessary code, notebook, files, and models that you have used to achieve the final product of that assignment. It also includes document that represent the process of the assignment such as flowcharts, diagrams and pseudo-codes. The product sub-folder sh Here is run down of the overall structure: A1_Planning Process Product A2_Configuring Process Product A3_Massing Process Product A4_Forming Process Product Final_Deliverables Here you will include all the final deliverables of your project. docs Here you will write and edit the source of your documentation in MarkDown . An example is included in the template to help you begin documenting your project. site you should leave this directory empty. It will be filled by automatic documentation generator MkDocs","title":"Folder Structure"},{"location":"documenting/folder_structure/#folder-structure","text":"The folders in student projects should strictly follow the structure of the folders in this repository. The main folders are four assignment folder (corresponding to each assignment) and one folder for final deliverables of your project. In general, the process sub-folders include all the necessary code, notebook, files, and models that you have used to achieve the final product of that assignment. It also includes document that represent the process of the assignment such as flowcharts, diagrams and pseudo-codes. The product sub-folder sh Here is run down of the overall structure: A1_Planning Process Product A2_Configuring Process Product A3_Massing Process Product A4_Forming Process Product Final_Deliverables Here you will include all the final deliverables of your project. docs Here you will write and edit the source of your documentation in MarkDown . An example is included in the template to help you begin documenting your project. site you should leave this directory empty. It will be filled by automatic documentation generator MkDocs","title":"Folder Structure"},{"location":"documenting/guidelines/","text":"Guidelines File Size : No file bigger than 50mb is recommended. No file bigger than 100mb is allowed. Folder Structure : Do not change the folder structure. You can sub-folders to the existing folders if you want but you shall not change the existing overall structure Duplicates : Do NOT include duplicates in your files. Naming Convention : Avoid using special characters or spaces in file and folder names. Instead, use \"_\" to separate words in the names. Geometric Models (.3dm, .obj, etc) should be compressed before being added to repository. Video and Animation files should not be included the repository. They should be uploaded to online video services (YouTube, Vimeo, etc). You should embed those video link in your documentation. (GIF files are allowed in your repo)","title":"Guidelines"},{"location":"documenting/guidelines/#guidelines","text":"File Size : No file bigger than 50mb is recommended. No file bigger than 100mb is allowed. Folder Structure : Do not change the folder structure. You can sub-folders to the existing folders if you want but you shall not change the existing overall structure Duplicates : Do NOT include duplicates in your files. Naming Convention : Avoid using special characters or spaces in file and folder names. Instead, use \"_\" to separate words in the names. Geometric Models (.3dm, .obj, etc) should be compressed before being added to repository. Video and Animation files should not be included the repository. They should be uploaded to online video services (YouTube, Vimeo, etc). You should embed those video link in your documentation. (GIF files are allowed in your repo)","title":"Guidelines"},{"location":"documenting/instructions/","text":"Documenting Instructions Installation Install Conda You can install Anaconda or Miniconda to install conda package manager (if you don't know the difference you should install anaconda). Create documentation environment Now we need to create the appropriate environment for documenting by installing all the necessary tools. To do so we have provided you an environment droplet, which is a recipe for a series of installations that create the aforementioned environment. For that, after directing to the root folder of this project where the environment droplet ( environment.yml ) is located, you need to run the following command: conda env create -f environment.yml Start Work on Documentation After finishing your work on documentation you need to shutdown the server and deactivate the environment. Activate the Environment Now that you have created the appropriate environment, you need to activate the environment to be able to work inside it. For that, as you are in the root folder of this project, you need to run the following command: conda activate spatial_computing_docs If the command line is now indicating the name of the environment in paranthesis, it means that the environment is activated. Similar to this ( spatial_computing_docs ) { your username } @ { your computer name } spatial_computing_project_template % Run the Local Server Now that the environment is activated, we need to run the local server to be able to see the result of changes in the local version of the documentation website. For that, run the following command: mkdocs serve After running this command, if the server has started to work successfully, you should see the following line in the command line: INFO - Serving on http://127.0.0.1:8000 This means that the server is accessible at http://127.0.0.1:8000 . If you open your browser and go this link you should see a local version of the site. Writing Your Documentation In the documenting process you need to head to the docs folder and edit the .md (markdown) files, since the website is build from these files. In the root of this project, you can edit the configurations of your project in mkdocs.yml file: Adding o removing pages Add markdown extensions . Some of the useful extensions: arithmatex for writing mathematics highlight for code highlighting Customizing the looks of your documentation Adding MkDocs Plugins , such as: mknotebooks for including python notebooks in the documentations Finish Work on Documentation Server Shut Down To shutdown the server, you need to press Ctrl + C in the command line. The following should appear in the command line: INFO - Shutting down... Deactivate Environment After shutting down your server the command line is back to the normal state and you can run commands again. To deactivate your environment you need to run the following command: conda deactivate Deployment of the Documentation Site Build and Deploy to deploy your documentation website, you need to run the following command in the root of this repository: mkdocs gh-deploy This command will create a new branch in your repository called gh-pages and build your site in it. It will then push the new branch to your remote repository automatically. It will also create a site folder in your root directory containing all of your site files. Since this folder is added .gitignore file, it won't be committed or pushed to the remote repository. Setup GitHub Pages For the first time, you need to configure the GitHub Pages service on your GitHub repository so it wil automatically build your documentation website whenever you deploy your site. To do this: Go to your repository setting, got GitHub Pages section, select gh-pages branch, select /(root) location, click on the save button. The setting page will refresh, and now if you go to the address that is provided at the GitHub Pages section, Wola, here is your documentation!","title":"Instructions"},{"location":"documenting/instructions/#documenting-instructions","text":"","title":"Documenting Instructions"},{"location":"documenting/instructions/#installation","text":"","title":"Installation"},{"location":"documenting/instructions/#install-conda","text":"You can install Anaconda or Miniconda to install conda package manager (if you don't know the difference you should install anaconda).","title":"Install Conda"},{"location":"documenting/instructions/#create-documentation-environment","text":"Now we need to create the appropriate environment for documenting by installing all the necessary tools. To do so we have provided you an environment droplet, which is a recipe for a series of installations that create the aforementioned environment. For that, after directing to the root folder of this project where the environment droplet ( environment.yml ) is located, you need to run the following command: conda env create -f environment.yml","title":"Create documentation environment"},{"location":"documenting/instructions/#start-work-on-documentation","text":"After finishing your work on documentation you need to shutdown the server and deactivate the environment.","title":"Start Work on Documentation"},{"location":"documenting/instructions/#activate-the-environment","text":"Now that you have created the appropriate environment, you need to activate the environment to be able to work inside it. For that, as you are in the root folder of this project, you need to run the following command: conda activate spatial_computing_docs If the command line is now indicating the name of the environment in paranthesis, it means that the environment is activated. Similar to this ( spatial_computing_docs ) { your username } @ { your computer name } spatial_computing_project_template %","title":"Activate the Environment"},{"location":"documenting/instructions/#run-the-local-server","text":"Now that the environment is activated, we need to run the local server to be able to see the result of changes in the local version of the documentation website. For that, run the following command: mkdocs serve After running this command, if the server has started to work successfully, you should see the following line in the command line: INFO - Serving on http://127.0.0.1:8000 This means that the server is accessible at http://127.0.0.1:8000 . If you open your browser and go this link you should see a local version of the site.","title":"Run the Local Server"},{"location":"documenting/instructions/#writing-your-documentation","text":"In the documenting process you need to head to the docs folder and edit the .md (markdown) files, since the website is build from these files. In the root of this project, you can edit the configurations of your project in mkdocs.yml file: Adding o removing pages Add markdown extensions . Some of the useful extensions: arithmatex for writing mathematics highlight for code highlighting Customizing the looks of your documentation Adding MkDocs Plugins , such as: mknotebooks for including python notebooks in the documentations","title":"Writing Your Documentation"},{"location":"documenting/instructions/#finish-work-on-documentation","text":"","title":"Finish Work on Documentation"},{"location":"documenting/instructions/#server-shut-down","text":"To shutdown the server, you need to press Ctrl + C in the command line. The following should appear in the command line: INFO - Shutting down...","title":"Server Shut Down"},{"location":"documenting/instructions/#deactivate-environment","text":"After shutting down your server the command line is back to the normal state and you can run commands again. To deactivate your environment you need to run the following command: conda deactivate","title":"Deactivate Environment"},{"location":"documenting/instructions/#deployment-of-the-documentation-site","text":"","title":"Deployment of the Documentation Site"},{"location":"documenting/instructions/#build-and-deploy","text":"to deploy your documentation website, you need to run the following command in the root of this repository: mkdocs gh-deploy This command will create a new branch in your repository called gh-pages and build your site in it. It will then push the new branch to your remote repository automatically. It will also create a site folder in your root directory containing all of your site files. Since this folder is added .gitignore file, it won't be committed or pushed to the remote repository.","title":"Build and Deploy"},{"location":"documenting/instructions/#setup-github-pages","text":"For the first time, you need to configure the GitHub Pages service on your GitHub repository so it wil automatically build your documentation website whenever you deploy your site. To do this: Go to your repository setting, got GitHub Pages section, select gh-pages branch, select /(root) location, click on the save button. The setting page will refresh, and now if you go to the address that is provided at the GitHub Pages section, Wola, here is your documentation!","title":"Setup GitHub Pages"},{"location":"index/bibliography/","text":"Bibliography Here you should cite all references and materials that you have used in your project. This is in addition to citation in the documentation itself. Title Source 1 URL 2 URL BOOK","title":"Bibliography"},{"location":"index/bibliography/#bibliography","text":"Here you should cite all references and materials that you have used in your project. This is in addition to citation in the documentation itself. Title Source 1 URL 2 URL BOOK","title":"Bibliography"},{"location":"index/figures/","text":"Figures Here you should include all of your figures and links to the pages that they have been used in. You can embed your only videos like this:","title":"Figures"},{"location":"index/figures/#figures","text":"Here you should include all of your figures and links to the pages that they have been used in. You can embed your only videos like this:","title":"Figures"},{"location":"index/presentations/","text":"Presentations Midterm presentation (17 December 2020): Final presentation (21 January 2021):","title":"Presentations"},{"location":"index/presentations/#presentations","text":"Midterm presentation (17 December 2020): Final presentation (21 January 2021):","title":"Presentations"},{"location":"index/scripts/","text":"Scripts Here you should include all of your scripts whether they are text, python notebook or procedural scripts. You should also include link to the link to relevant location in the main pages, description, explanatory materials such as pseudo code or flowcharts, and visualizations if it is applicable. If necessary this page can be broken down to multiple pages. Here is an example of how to include your scripts: edges = [] for cell_neigh in cell_neighbors : cell = cell_neigh [ 0 ] for neigh in cell_neigh [ 1 :]: if neigh != - 1 and neigh > cell : edges . append (( cell , neigh )) - Voxelization highres and lowres: \"insert\" - Solar enveloppe + interpolation: \"insert\" - Shadow analysis + interpolation: \"insert\" - Skyview: \"insert\" - Noise: \"insert\" - Pathfinding + interpolation: \"insert\" - Agent based generation: \"insert\" - Shaping: \"insert\"","title":"Scripts"},{"location":"index/scripts/#scripts","text":"Here you should include all of your scripts whether they are text, python notebook or procedural scripts. You should also include link to the link to relevant location in the main pages, description, explanatory materials such as pseudo code or flowcharts, and visualizations if it is applicable. If necessary this page can be broken down to multiple pages. Here is an example of how to include your scripts: edges = [] for cell_neigh in cell_neighbors : cell = cell_neigh [ 0 ] for neigh in cell_neigh [ 1 :]: if neigh != - 1 and neigh > cell : edges . append (( cell , neigh )) - Voxelization highres and lowres: \"insert\" - Solar enveloppe + interpolation: \"insert\" - Shadow analysis + interpolation: \"insert\" - Skyview: \"insert\" - Noise: \"insert\" - Pathfinding + interpolation: \"insert\" - Agent based generation: \"insert\" - Shaping: \"insert\"","title":"Scripts"}]}